Index: app/components/ReadingPage/DocumentPages.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Libs\nimport React from 'react';\nimport {connect} from \"react-redux\";\nimport { Document }                     from 'react-pdf/dist/entry.webpack'; // IMPORTANT: we need this for pdf viewer\nimport PropTypes from \"prop-types\";\nimport {isEmpty, throttle} from 'lodash';\nimport styled from \"styled-components\";\n\n// Components\nimport Loader                           from '../Loader';\nimport VirtualizedList from '../ReactVirtualizedComponents/VirtualizedList';\nimport Page from '../ReadingPage/DocumentAssets/Page';\nimport PDFPage from '../ReadingPage/DocumentAssets/PDFPage';\n\n// Custom Modules\nimport firestoreUtils from \"../../../functions/utils/Firestore\";\nimport {\n    DOCUMENT_ASSETS_DEFAULT_PAGE_WIDTH,\n    DOCUMENT_ASSETS_DEFAULT_PAGE_HEIGHT\n} from \"../../constants/generalAppConstants\";\nimport ProcessUrlParamterStates from '../../constants/processUrlParameterStates';\n\n// Constants\nconst PDF_DOCUMENT_TYPE = firestoreUtils.PDF_TYPE;\n\nconst mapStateToProps = (state, props) => {\n    return {\n        seeInContext: state.insights.seeInContext,\n        pageWidth: Math.min(props.viewportWidth, DOCUMENT_ASSETS_DEFAULT_PAGE_WIDTH),\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n\n    };\n};\n\nclass DocumentPages extends React.Component{\n\n    static propTypes = {\n        activeDoc: PropTypes.object.isRequired,\n        cellUpdateTriggerProps: PropTypes.object.isRequired,\n        setCurrentPage: PropTypes.func.isRequired,\n        isContextViewerPage: PropTypes.bool.isRequired,\n        windowScrollerEnabled: PropTypes.bool.isRequired,\n        viewportWidth: PropTypes.number.isRequired,\n        pageWidth: PropTypes.number.isRequired,\n        insightsIsActive: PropTypes.bool.isRequired,\n        pageIndex2Insights: PropTypes.object.isRequired,\n        seeInContext: PropTypes.object.isRequired,\n        scrollElement: PropTypes.object.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            scrollToPageIndex: -1,\n            seeInContext: {\n                highlights: {},\n                selections: {},\n            },\n            pdfDocumentLoaded: ProcessUrlParamterStates.UNAWARE,\n        };\n        this.handleScroll = throttle(this.handleScroll, 1000, {leading: true, trailing: false});\n    }\n\n    componentWillMount() {\n\n    }\n\n    render() {\n        return (\n            <Content\n                adjustMarginTop={this.props.adjustMarginTop}\n                id={\"reading-page-content\"}\n            >\n                {(() => {\n                    if (this.props.activeDoc.type === PDF_DOCUMENT_TYPE) {\n                        return (\n                            <Document\n                                file={this.props.activeDoc.url}\n                                loading={<Loader/>}\n                                onLoadSuccess={() => this.markPdfDocumentAsLoaded()}\n                            >\n                                {this.renderPagesList(this.renderPDFPage)}\n                            </Document>\n                        );\n                    } else if (!isEmpty(this.props.activeDoc.pages) && this.props.activeDoc.numPages > 0) {\n                        return this.renderPagesList(this.renderPage);\n                    } else {\n                        return (<Loader />);\n                    }\n                })()}\n            </Content>\n        );\n    }\n\n    componentDidMount() {\n        this.props.scrollElement.addEventListener(\"scroll\", this.handleScroll);\n        if (this.props.shareMethodsWithParent) {\n            this.props.shareMethodsWithParent(this.scrollToPage.bind(this))\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextState) {\n        if (this.props.activeDoc.type === PDF_DOCUMENT_TYPE\n            && this.state.pdfDocumentLoaded !== ProcessUrlParamterStates.COMPLETED) {\n\n        } else {\n            // new props of seeInContext seem to mutate the previous instance of\n            // seeInContext props so we setState with the props and so we can use\n            // state as a reliable time-sequence of prop updates\n            this.setState({seeInContext: nextProps.seeInContext});\n        }\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.activeDoc.type === PDF_DOCUMENT_TYPE) {\n            switch (this.state.pdfDocumentLoaded) {\n                case ProcessUrlParamterStates.UNAWARE: {\n                    // do nothing\n                    return;\n                }\n                case ProcessUrlParamterStates.ACKNOWLEDGED: {\n                    this.setState({\n                        seeInContext: this.props.seeInContext,\n                        pdfDocumentLoaded: ProcessUrlParamterStates.COMPLETED\n                    });\n                    return;\n                }\n                case ProcessUrlParamterStates.COMPLETED: {\n                    // act normally\n                    break;\n                }\n            }\n        }\n\n        // BEGIN: Navigate to the context of an insight if appropriate\n        const oldContext = prevState.seeInContext;\n        const newContext = this.state.seeInContext;\n\n        if (!isEmpty(newContext.highlights)) {\n            const oldHighlightsContext = oldContext.highlights;\n            const oldIdentifier = oldHighlightsContext.paragraphIndex !== undefined\n                ? `#paragraph-${oldHighlightsContext.paragraphIndex}`\n                : undefined;\n            const newHighlightsContext = newContext.highlights;\n            const newIdentifier = newHighlightsContext.paragraphIndex !== undefined\n                ? `#paragraph-${newHighlightsContext.paragraphIndex}`\n                : undefined;\n\n            const oldPageIndex = oldHighlightsContext.pageIndex;\n            const newPageIndex = newHighlightsContext.pageIndex;\n\n            if (oldPageIndex !== newPageIndex) {\n                this.scrollToPage(newPageIndex);\n            }\n\n            this.scrollToQuoteIfAppropriate(newPageIndex, oldIdentifier, newIdentifier);\n        } else if (!isEmpty(newContext.selections)) {\n            const oldSelectionsContext = oldContext.selections;\n            const oldIdentifier = oldSelectionsContext.insightUID !== undefined\n                ? `div[data-insight-uid='${oldSelectionsContext.insightUID}']`\n                : undefined;\n            const newSelectionsContext = newContext.selections;\n            const newIdentifier = newSelectionsContext.insightUID !== undefined\n                ? `div[data-insight-uid='${newSelectionsContext.insightUID}']`\n                : undefined;\n\n            const oldPageIndex = oldSelectionsContext.pageIndex;\n            const newPageIndex = newSelectionsContext.pageIndex;\n\n            if (oldPageIndex !== newPageIndex) {\n                this.scrollToPage(newPageIndex);\n            }\n\n            this.scrollToQuoteIfAppropriate(newPageIndex, oldIdentifier, newIdentifier);\n        }\n        // END: Navigate to the context of an insight if appropriate\n    }\n\n    componentWillUnmount() {\n        this.props.scrollElement.removeEventListener(\"scroll\", this.handleScroll);\n    }\n\n    // ========== Methods ===========\n\n    renderPagesList = pageRender => {\n        return (\n            <VirtualizedList\n                length={this.props.activeDoc.numPages}\n                width={this.props.viewportWidth}\n                renderCell={pageRender}\n                scrollElement={this.props.scrollElement}\n                pageIndex={this.state.scrollToPageIndex}\n                cellUpdateTriggerProps={this.props.cellUpdateTriggerProps}\n                windowScrollerEnabled={this.props.windowScrollerEnabled}\n                defaultRowHeight={DOCUMENT_ASSETS_DEFAULT_PAGE_HEIGHT}\n            />\n        );\n    };\n\n    renderPDFPage = (index, measure, isVisible) => {\n        return (\n            <PDFPage\n                measure={measure}\n                pageIndex={index}\n                isVisible={isVisible}\n                pageInsightUIDs={this.props.insightsIsActive && this.props.pageIndex2Insights[index] || {}}\n                docUID={this.props.activeDoc.uid}\n                isContextViewerPage={this.props.isContextViewerPage}\n                setCurrentPage={this.props.setCurrentPage}\n\n                viewportWidth={this.props.viewportWidth}\n                pageWidth={this.props.pageWidth}\n            />\n        );\n    };\n\n    renderPage = (index, measure, isVisible, parent) => {\n        const {numPages, uid} = this.props.activeDoc;\n        return (\n            <Page\n                onLoadSuccess={measure}\n                pageIndex={index}\n                isVisible={isVisible}\n                pageInsightUIDs={(this.props.insightsIsActive && this.props.pageIndex2Insights[index]) || {}}\n                docUID={uid}\n                isContextViewerPage={this.props.isContextViewerPage}\n                setCurrentPage={this.props.setCurrentPage}\n\n                pageCount={numPages}\n                parent={parent}\n            />\n        );\n    };\n\n    handleScroll = (event) => {\n        this.clearScrollToIndex();\n    };\n\n    clearScrollToIndex() {\n        this.setState({\n            scrollToPageIndex: -1,\n            seeInContext: {\n                highlights: {},\n                selections: {},\n            },\n        });\n    };\n\n    scrollToQuoteIfAppropriate = (newPage, oldIdentifier, newIdentifier) => {\n        const oldNode = document.querySelector(oldIdentifier);\n        const newNode = document.querySelector(newIdentifier);\n        const nodeCameIntoExistence = !oldNode && !!newNode;\n        const quoteIsSomewhereNew = newIdentifier !== undefined && oldIdentifier !== newIdentifier;\n        if ((nodeCameIntoExistence || quoteIsSomewhereNew) && newNode) {\n            newNode.scrollIntoView(newNode, {behavior: \"smooth\", block: \"center\", inline: \"center\"});\n        }\n    };\n\n    scrollToPage(pageIndex) {\n        setTimeout(() => {\n            this.setState({scrollToPageIndex: pageIndex})\n        }, 10);\n    };\n\n    markPdfDocumentAsLoaded = () => {\n        this.setState({pdfDocumentLoaded: ProcessUrlParamterStates.ACKNOWLEDGED});\n    }\n}\n\nconst Content = styled.div`\n    position: relative;\n    width: 100%;\n    min-height: calc(100vh - 350px);\n    height: auto;\n    padding: 10px 10px;\n    margin-top: ${props => props.adjustMarginTop}px;\n`;\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(DocumentPages);\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/ReadingPage/DocumentPages.js	(revision 5e45e31694cda276c5e7c802d69123e978dcb609)
+++ app/components/ReadingPage/DocumentPages.js	(date 1543808998737)
@@ -126,7 +126,7 @@
                 case ProcessUrlParamterStates.ACKNOWLEDGED: {
                     this.setState({
                         seeInContext: this.props.seeInContext,
-                        pdfDocumentLoaded: ProcessUrlParamterStates.COMPLETED
+                        pdfDocumentLoaded: ProcessUrlParamterStates.COMPLETED,
                     });
                     return;
                 }
@@ -138,9 +138,13 @@
         }
 
         // BEGIN: Navigate to the context of an insight if appropriate
+
         const oldContext = prevState.seeInContext;
         const newContext = this.state.seeInContext;
 
+        if (!this.props.isContextViewerPage) {
+            console.log('componentDidUpdate', oldContext, newContext);
+        }
         if (!isEmpty(newContext.highlights)) {
             const oldHighlightsContext = oldContext.highlights;
             const oldIdentifier = oldHighlightsContext.paragraphIndex !== undefined
@@ -155,6 +159,7 @@
             const newPageIndex = newHighlightsContext.pageIndex;
 
             if (oldPageIndex !== newPageIndex) {
+                console.log("I'm getting called BBBBBBBBBBBBBBB", oldPageIndex, newPageIndex);
                 this.scrollToPage(newPageIndex);
             }
 
@@ -173,6 +178,7 @@
             const newPageIndex = newSelectionsContext.pageIndex;
 
             if (oldPageIndex !== newPageIndex) {
+                console.log("I'm getting called AAAAAAAAAAAAAA", oldPageIndex, newPageIndex);
                 this.scrollToPage(newPageIndex);
             }
 
@@ -190,6 +196,11 @@
     renderPagesList = pageRender => {
         return (
             <VirtualizedList
+                dummyProp={() => {
+                    if (this.props.isContextViewerPage) {
+                        console.log('renderPagesList', this.state.scrollToPageIndex)
+                    }
+                }}
                 length={this.props.activeDoc.numPages}
                 width={this.props.viewportWidth}
                 renderCell={pageRender}
@@ -242,6 +253,7 @@
     };
 
     clearScrollToIndex() {
+        console.log('clearScrollToIndex', this.props.isContextViewerPage);
         this.setState({
             scrollToPageIndex: -1,
             seeInContext: {
@@ -262,9 +274,10 @@
     };
 
     scrollToPage(pageIndex) {
+        console.log('DocumentPages scrollToPage', pageIndex, this.props.isContextViewerPage);
         setTimeout(() => {
             this.setState({scrollToPageIndex: pageIndex})
-        }, 10);
+        }, 1000);
     };
 
     markPdfDocumentAsLoaded = () => {
Index: app/components/ReadingPage/ReadingPage.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Libs\nimport React                            from 'react';\nimport PropTypes                        from 'prop-types';\nimport styled                           from 'styled-components';\nimport {ThemeContext}                   from '../../themes/theme-context';\nimport uuid                             from 'uuid';\nimport Img                              from 'react-image';\nimport { Document }                     from 'react-pdf/dist/entry.webpack'; // IMPORTANT: we need this for pdf viewer\nimport { connect }                      from 'react-redux';\nimport { compose }                      from 'redux';\nimport {\n    firestoreConnect,\n    withFirebase,\n    withFirestore,\n    isEmpty,\n} from 'react-redux-firebase';\nimport {\n    isEqual,\n    pickBy,\n    range,\n    minBy,\n    maxBy,\n    mapKeys,\n    uniq,\n}                                       from 'lodash';\n\n// Actions\nimport {\n    showInsights,\n    shareDocument,\n    setCurrentPage,\n    setDocumentLastOpened,\n    resetUnloadedReadingPageBucket,\n    setSelectionOrHighlightInsightData,\n    setNewInsightDialog,\n    unstageAllMarginalia,\n    incrementDocumentViews,\n    updateDocument,\n    resetInsightStore,\n    setDocumentStyleDialog,\n    setReadingPageInsightDialog,\n    setReadingPageSearchDialog,\n    setPageLayout,\n    setNightMode,\n    setSelectedInsight,\n} from '../../actions/ReadingPageActions';\n\nimport {\n    addToClipboard,\n    setSnackbar,\n    setAppView,\n    updateRouterState,\n    setReadingToolbar\n} from '../../actions/AppActions';\n\nimport {\n    addDocumentToShelf,\n    removeDocumentFromShelf\n} from '../../actions/ShelfActions';\n\nimport {\n    setDocumentSession\n} from '../../actions/ProfileActions';\n\nimport {\n    insightShouldBeVisibleToViewingUser,\n    insightsQueryFromCondition,\n    getDocumentLink,\n    updateUserVoteInEntity,\n    isHighlightInsight,\n    isSelectionInsight,\n    getInsightsCollectionFromStore,\n    filterInsightByUserScope,\n    documentRoute\n} from '../../actions/Utils';\n\nimport {\n    fetchUsersConnectionSummaries\n} from '../../actions/Connections/Helpers';\n\n// Components\nimport InsightGraph                     from './InsightGraph/InsightGraph';\nimport Page                             from './DocumentAssets/Page';\nimport Button                           from '../Button';\nimport ActionButton                     from '../ActionButton';\nimport StatsBanner                      from '../StatsBanner';\nimport FilterableGroup                  from '../HOC/FilterableGroup';\nimport TimeBeforeFormat                 from '../HOC/TimeBeforeFormat';\nimport VisibilityIcon                   from '../HOC/VisibilityIcon';\nimport ImagePlaceholder                 from '../ImagePlaceholder';\nimport TextPlaceholder                  from '../TextPlaceholder';\nimport Loader                           from '../Loader';\nimport Navbar                           from '../Navbar/Navbar';\nimport NavDrawer                        from '../NavDrawer/NavDrawer';\nimport InsightViewer                    from './InsightViewer/InsightViewer';\nimport DocumentStyleDialog              from './DocumentStyleDialog/DocumentStyleDialog';\nimport InsightDialog                    from './InsightDialog/InsightDialog';\nimport SearchDialog                     from './SearchDialog/SearchDialog';\nimport ReadingPageSearchbar             from './ReadingPageSearchbar/ReadingPageSearchbar';\nimport ReadingToolbar                   from './ReadingToolbar/ReadingToolbar';\nimport VirtualizedList                  from '../ReactVirtualizedComponents/VirtualizedList';\nimport PDFPage                          from './DocumentAssets/PDFPage';\nimport DocumentPages from './DocumentPages';\n\n// Icons\nimport InsightIcon                      from '../Icons/InsightIcon';\nimport QuoteIcon                        from '../Icons/QuoteIcon';\nimport SearchIcon                       from '../Icons/SearchIcon';\nimport LinkIcon                         from '../Icons/LinkIcon';\nimport LibraryIcon                      from '../Icons/LibraryIcon';\nimport ShareIcon                        from '../Icons/ShareIcon';\nimport ShelfIcon                        from '../Icons/ShelfIcon';\nimport FontSizeIcon                     from '../Icons/FontSizeIcon';\nimport ViewOriginalIcon                 from '../Icons/ViewOriginalIcon';\n\n// Custom Modules\nimport firestoreUtils                   from '../../../functions/utils/Firestore';\nimport ColorTypes                       from '../../constants/colorTypes';\nimport Visibility                       from '../../constants/visibility';\nimport Views                            from '../../constants/views';\nimport InsightVariantTypes              from '../../constants/insightVariantTypes';\nimport AnnotationTypes                  from '../../constants/annotationTypes';\nimport QuestionStates                   from '../../constants/questionStates';\nimport DocumentTypes                    from '../../constants/documentTypes';\nimport {\n    DOCUMENT_ASSETS_DEFAULT_PAGE_HEIGHT,\n    DOCUMENT_ASSETS_DEFAULT_PAGE_WIDTH,\n    NIGHT_MODE_DAY_THRESHOLD,\n    NIGHT_MODE_NIGHT_THRESHOLD\n} from '../../constants/generalAppConstants';\nimport ProcessUrlParameterStates from '../../constants/processUrlParameterStates';\nimport InsightViewerModes from \"../../constants/inisghtViewerModes\";\n\n// Constants\nconst ARTICLES_TYPE = firestoreUtils.ARTICLE_TYPE;\nconst PAGES_COLLECTION = firestoreUtils.collections.documents.pages.NAME;\nconst INSIGHTS_COLLECTION = firestoreUtils.collections.insights.NAME;\nconst DOCUMENTS_COLLECTION = firestoreUtils.collections.documents.NAME;\nconst USERS_COLLECTION = firestoreUtils.collections.users.NAME;\nconst PAGES_BUCKET_SIZE = firestoreUtils.collections.documents.pages.LOAD_BUCKET_SIZE;\nconst SEARCH_COLLECTION = firestoreUtils.collections.documents.search.NAME;\nconst PDF_DOCUMENT_TYPE = firestoreUtils.PDF_TYPE;\nconst DOCUMENT_VOTE_OPTIONS = firestoreUtils.feedback.votes;\nconst USER_DOCUMENTS_COLLECTION = firestoreUtils.collections.users.documents.NAME;\n\nconst mapStateToProps = (state, props) => {\n    const viewportWidth = state.app.viewportDimensions.width;\n    const currentUser = state.profile.currentUser.metadata;\n    const connections = state.profile.currentUser.connectionsMetadata;\n    const currentUserUID = currentUser.uid;\n    const firestoreData = state.firestore.data;\n    const docUID = props.match.params.uid;\n    const insightsCollection = getInsightsCollectionFromStore(state);\n    const documentsCollection = (firestoreData && firestoreData[DOCUMENTS_COLLECTION]) || {};\n    const usersCollection = (firestoreData && firestoreData[USERS_COLLECTION]) || {};\n    const currentUsersDocumentsCollection = usersCollection\n        && usersCollection[currentUserUID]\n        && usersCollection[currentUserUID][USER_DOCUMENTS_COLLECTION];\n\n    let activeDoc = {};\n    let authorUID = \"\";\n    if (insightsCollection\n        && documentsCollection[docUID]\n        && currentUserUID\n        && state.app.readingPageInsights.filter\n    ) {\n        const Insights = pickBy(insightsCollection, insight =>\n            insight\n            && insight.doc === docUID\n            && insightShouldBeVisibleToViewingUser(insight, currentUserUID)\n            && filterInsightByUserScope(\n                insight,\n                currentUserUID,\n                {\n                    ...(connections.friends || {}),\n                    ...(connections.following || {}),\n                },\n                state.app.readingPageInsights.filter\n            )\n        );\n        const {Pages, ...docMetadata} = documentsCollection[docUID];\n        activeDoc = {\n            ...docMetadata,\n            insights: Insights,\n            pages: Pages,\n        };\n        authorUID = activeDoc.author;\n    }\n\n    const pageIndex2Insights = {};\n    const pageInsightsCount = (new Array(activeDoc.numPages)).fill(0);\n    if (activeDoc.insights) {\n        for (const insightUID in activeDoc.insights) {\n            if (activeDoc.insights.hasOwnProperty(insightUID)) {\n                const insight = insightsCollection[insightUID];\n                if (isHighlightInsight(insight)) {\n                    const {start, end} = insight.quote.text.index.page;\n                    for (let i = start; i <= end; i++) {\n                        if (!pageIndex2Insights[i]) { pageIndex2Insights[i] = {} }\n                        pageIndex2Insights[i][insightUID] = insight;\n                        pageInsightsCount[i]++;\n                    }\n                } else if (isSelectionInsight(insight)) {\n                    const {pageIndex} = insight.quote.box;\n                    if (!pageIndex2Insights[pageIndex]) { pageIndex2Insights[pageIndex] = {} }\n                    pageIndex2Insights[pageIndex][insightUID] = insight;\n                    pageInsightsCount[pageIndex]++;\n                }\n            }\n\n        }\n    }\n\n    let authorData = (authorUID && usersCollection[authorUID]) || {};\n\n    return {\n        unloadedDocumentPagesBucket: state.app.unloadedDocumentPagesBucket,\n        connections: connections,\n        currentUser,\n        userIsAnonymous: state.profile.currentUser.userIsAnonymous,\n        userIsSignedIn: state.profile.currentUser.userIsSignedIn,\n        activeDoc,\n        insightsIsActive: state.app.readingPageInsights.active,\n        viewportWidth,\n        currentUserShelf: state.profile.currentUser.shelf || {},\n        isMobile: state.app.isMobile,\n        readingToolbar: state.app.readingToolbar,\n        insightViewerDialog: state.app.insightViewerDialog,\n        newInsightDialog: state.app.newInsightDialog,\n        authorUID,\n        authorData,\n        seeInContext: state.insights.seeInContext,\n        documentStyleDialog: state.app.documentStyleDialog,\n        readingPageInsightDialog: state.app.readingPageInsightDialog,\n        readingPageSearchDialog: state.app.readingPageSearchDialog,\n        readingPageStyle: state.app.readingPageStyle,\n        settings: state.profile.currentUser.metadata.settings,\n        pageWidth: Math.min(viewportWidth, DOCUMENT_ASSETS_DEFAULT_PAGE_WIDTH),\n        pageIndex2Insights,\n        pageInsightsCount,\n        currentUsersDocumentsCollection,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        showInsights: state => dispatch(showInsights(state)),\n        shareDocument: doc => dispatch(shareDocument(doc)),\n        addToClipboard: (title, link) => dispatch(addToClipboard(title, link)),\n        setSnackbar: data => dispatch(setSnackbar(data)),\n        setAppView: view => dispatch(setAppView(view)),\n        updateRouterState: (history, match) => dispatch(updateRouterState(history, match)),\n        updateDocument: (docUID, updateObj) => dispatch(updateDocument(docUID, updateObj)),\n        incrementDocumentViews: docUID => dispatch(incrementDocumentViews(docUID)),\n        addDocumentToShelf: docUID => dispatch(addDocumentToShelf(docUID)),\n        removeDocumentFromShelf: docUID => dispatch(removeDocumentFromShelf(docUID)),\n        setDocumentSession: session => dispatch(setDocumentSession(session)),\n        setCurrentPage: (docUID, pageIndex) => dispatch(setCurrentPage(docUID, pageIndex)),\n        setDocumentLastOpened: docUID => dispatch(setDocumentLastOpened(docUID)),\n        resetUnloadedReadingPageBucket: () => dispatch(resetUnloadedReadingPageBucket()),\n        setReadingToolbar: (active, x, y) => dispatch(setReadingToolbar(active, x, y)),\n        setSelectionOrHighlightInsightData: data => dispatch(setSelectionOrHighlightInsightData(data)),\n        setNewInsightDialog: data => dispatch(setNewInsightDialog(data)),\n        fetchUsersConnectionSummaries: () => dispatch(fetchUsersConnectionSummaries()),\n        unstageAllMarginalia: () => dispatch(unstageAllMarginalia()),\n        resetInsightStore: () => dispatch(resetInsightStore()),\n        setDocumentStyleDialog: data => dispatch(setDocumentStyleDialog(data)),\n        setReadingPageInsightDialog: data => dispatch(setReadingPageInsightDialog(data)),\n        setReadingPageSearchDialog: data => dispatch(setReadingPageSearchDialog(data)),\n        setPageLayout: bool => dispatch(setPageLayout(bool)),\n        setNightMode: bool => dispatch(setNightMode(bool)),\n        setSelectedInsight: data => dispatch(setSelectedInsight(data)),\n  };\n};\n\n/**\n * The ReadingPage component is a component used to\n */\nclass ReadingPage extends React.Component {\n    // ============= PropTypes ==============\n    static propTypes = {\n        viewportWidth: PropTypes.number.isRequired,\n        insightsIsActive: PropTypes.bool.isRequired,\n        showInsights: PropTypes.func.isRequired,\n        shareDocument: PropTypes.func.isRequired,\n        activeDoc: PropTypes.object.isRequired,\n        setAppView: PropTypes.func.isRequired,\n        updateRouterState: PropTypes.func.isRequired,\n        currentUser: PropTypes.object.isRequired,\n        updateDocument: PropTypes.func.isRequired,\n        userIsAnonymous: PropTypes.bool.isRequired,\n        addDocumentToShelf: PropTypes.func.isRequired,\n        removeDocumentFromShelf: PropTypes.func.isRequired,\n        currentUserShelf: PropTypes.object.isRequired,\n        setDocumentSession: PropTypes.func.isRequired,\n        setCurrentPage: PropTypes.func.isRequired,\n        setDocumentLastOpened: PropTypes.func.isRequired,\n        setNewInsightDialog: PropTypes.func.isRequired,\n        isMobile: PropTypes.bool.isRequired,\n        readingToolbar: PropTypes.object.isRequired,\n        setSelectionOrHighlightInsightData: PropTypes.func.isRequired,\n        newInsightDialog: PropTypes.object.isRequired,\n        documentStyleDialog: PropTypes.object.isRequired,\n        setDocumentStyleDialog: PropTypes.func.isRequired,\n        readingPageInsightDialog: PropTypes.object.isRequired,\n        setReadingPageInsightDialog: PropTypes.func.isRequired,\n        readingPageSearchDialog: PropTypes.object.isRequired,\n        setReadingPageSearchDialog: PropTypes.func.isRequired,\n        settings: PropTypes.object.isRequired,\n        readingPageStyle: PropTypes.object.isRequired,\n        setPageLayout: PropTypes.func.isRequired,\n        setNightMode: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            actionButtons: {\n                styling: {\n                    icon: FontSizeIcon,\n                    text: () => null,\n                    backgroundColor: () => this.props.readingPageStyle.nightMode ? ColorTypes.PITCH_BLACK : ColorTypes.BLACK,\n                    active: true,\n                    handleClick: this.handleModifyStyleDialogActivation,\n                    title: () => \"Edit Layout\"\n                },\n                insights: {\n                    icon: InsightIcon,\n                    text: () => null,\n                    backgroundColor: () => ColorTypes.YELLOW,\n                    active: true,\n                    handleClick: this.handleModifyInsightDialogActivation,\n                    title: () => \"Modify Insight Settings\"\n                },\n                search: {\n                    icon: SearchIcon,\n                    text: () => null,\n                    backgroundColor: () => ColorTypes.GREEN,\n                    active: true,\n                    handleClick: null,\n                    title: () => \"Search Document\"\n                },\n                viewOriginal: {\n                    icon: ViewOriginalIcon,\n                    text: () => null,\n                    backgroundColor: () => ColorTypes.BLUE,\n                    active: true,\n                    handleClick: () => {window.open(this.props.activeDoc.url, '_blank')},\n                    title: () => \"View Original\"\n                },\n                share: {\n                    icon: ShareIcon,\n                    text: () => null,\n                    backgroundColor: () => ColorTypes.RED,\n                    active: false,\n                    handleClick: this.props.shareDocument,\n                    title: () => \"Share Document\"\n                },\n                link: {\n                    icon: LinkIcon,\n                    text: () => null,\n                    backgroundColor: () => ColorTypes.PURPLE,\n                    active: true,\n                    handleClick: () => {\n                        this.props.addToClipboard(this.props.activeDoc.title, getDocumentLink(this.props.activeDoc.uid));\n                        const message = `Added \"${this.props.activeDoc.title}\" to your Clipboard.`;\n                        this.props.setSnackbar({\n                            active: true,\n                            message: message,\n                            duration: 3000\n                        });\n                    },\n                    title: () => \"Get Link\"\n                },\n                addToShelf: {\n                    icon: ShelfIcon,\n                    text: () => this.props.currentUserShelf[this.props.activeDoc.uid] ? \"Remove\" : \"Add\",\n                    backgroundColor: () => ColorTypes.RED,\n                    active: true,\n                    handleClick: this.handleShelfAction,\n                    title: () => this.props.currentUserShelf[this.props.activeDoc.uid] ? \"Remove from your Shelf\" : \"Add to your Shelf\"\n                }\n            },\n            currentPage: 0,\n            currentSessionSent: false,\n            docViewsIncremented: false,\n            navigateToCurrentPage: false,\n            currentSession: {\n                doc: props.match.params.uid,\n                uid: uuid.v4(),\n                timestamps: {\n                    start: 0,\n                    end: 0\n                }\n            },\n            pdfAnnotation: {\n                isAnnotating: false,\n                selection: {},\n                box: {\n                    blob: undefined,\n\n                },\n            },\n            viewportScrollY: 0,\n            scrollThreshold: 300,\n            showMobileAnnotationTools: false,\n            linkForUsersInsights: ProcessUrlParameterStates.UNAWARE,\n            linkForSpecificInsight: ProcessUrlParameterStates.UNAWARE,\n        };\n        this.handleScroll = this.handleScroll.bind(this);\n        this.documentPagesRef = React.createRef();\n    }\n\n    componentWillMount() {\n        //console.log(\"-----ReadingPage\");\n        // window.scrollTop = 0;\n        this.props.updateRouterState(this.props.history, this.props.match);\n        this.props.setAppView(documentRoute(this.props.match.params.uid));\n\n        // Change Page Title\n        if (this.props.activeDoc.title) {\n            document.title = this.props.activeDoc.title;\n        }\n\n        // Start Session\n        let currentSession = {...this.state.currentSession};\n        currentSession.timestamps.start = new Date().getTime();\n\n        if (this.props.activeDoc.type &&\n            this.props.activeDoc.uid &&\n            this.props.currentUser.uid) {\n            currentSession.doc = this.props.activeDoc.uid;\n            this.props.setDocumentSession(currentSession);\n            this.props.setDocumentLastOpened(this.props.activeDoc.uid);\n            this.setState({\n                currentSession: {...currentSession},\n                currentSessionSent: true\n            });\n        } else {\n            this.setState({\n                currentSession: {...currentSession}\n            });\n        }\n\n        if (!this.props.userIsAnonymous && isEmpty(this.props.connections)) {\n            this.props.fetchUsersConnectionSummaries();\n        }\n\n        this.state.viewportScrollY = window.scrollY;\n\n        // Switch to Night Mode if Night\n        // Automatically make skin to be night if later than 8\n        let minutesInHour = 60,\n            offset = new Date().getTimezoneOffset()/minutesInHour,\n            hour = new Date().getUTCHours();\n\n        if ((hour - offset >= NIGHT_MODE_DAY_THRESHOLD || NIGHT_MODE_NIGHT_THRESHOLD > hour - offset) && !this.props.readingPageStyle.nightMode && this.props.settings.autoNightMode) {\n            this.props.setNightMode(true);\n        } else if ((hour - offset < NIGHT_MODE_DAY_THRESHOLD || NIGHT_MODE_NIGHT_THRESHOLD <= hour - offset) && this.props.readingPageStyle.nightMode && this.props.settings.autoNightMode) {\n            this.props.setNightMode(false);\n        }\n    }\n\n    render() {\n        // Updating scroll Threshold\n        if (this.documentBanner) {\n            this.state.scrollThreshold = this.documentBanner.clientHeight - 30;\n        }\n\n        return (\n            <ThemeContext.Consumer>\n                {theme => {\n                    const activeDoc = this.props.activeDoc;\n                    return (\n                        <Container>\n                            <Navbar\n                                activeDoc={this.props.activeDoc} />\n                            <NavDrawer />\n                            <ReadingInterface>\n                                <DocumentBanner\n                                    innerRef={comp => this.documentBanner = comp}\n                                    nightMode={this.props.readingPageStyle.nightMode}\n                                    fixToViewport={this.state.viewportScrollY > this.state.scrollThreshold}>\n                                    <LeftContent>\n                                        <DocumentCover>\n                                            {this.props.activeDoc.coverImage && this.props.activeDoc.coverImage.url ?\n                                                    <Img\n                                                        src={this.props.activeDoc.coverImage.url}\n                                                        loader={\n                                                            <ImagePlaceholder\n                                                                height={\"100%\"}\n                                                                width={\"100%\"}>\n                                                                <LibraryIcon\n                                                                    primarycolor={theme.black}\n                                                                    opacity={0.38}\n                                                                    hover={false} />\n                                                            </ImagePlaceholder>\n                                                        } />\n                                                :\n                                                    <ImagePlaceholder\n                                                        height={\"250px\"}\n                                                        width={\"200px\"}>\n                                                        <LibraryIcon\n                                                            primarycolor={theme.black}\n                                                            opacity={0.38}\n                                                            hover={false} />\n                                                    </ImagePlaceholder>\n                                            }\n                                        </DocumentCover>\n                                    </LeftContent>\n                                    <RightContent>\n                                        <DocumentTitle>\n                                                {this.props.activeDoc.title ?\n                                                    this.props.activeDoc.title\n                                                :\n                                                    <TextPlaceholder\n                                                        height={\"2em\"}\n                                                        width={this.props.viewportWidth > 900 ? \"300px\" : \"200px\"}\n                                                        marginBottom={false} />\n                                                }\n                                        </DocumentTitle>\n                                        <DocumentAuthor\n                                            nightMode={this.props.readingPageStyle.nightMode}>\n                                            {Object.keys(this.props.authorData).length > 0 && this.props.authorData.name.fullName ?\n                                                this.props.authorData.name.fullName\n                                            :\n                                                this.props.activeDoc.type === PDF_DOCUMENT_TYPE ?\n                                                    this.props.activeDoc.author\n                                                :\n                                                    <TextPlaceholder\n                                                        height={\"1.3em\"}\n                                                        width={\"150px\"}\n                                                        marginBottom={false} />\n                                            }\n                                        </DocumentAuthor>\n                                        <DocumentDate>\n                                            {this.props.activeDoc.publishDate ?\n                                                TimeBeforeFormat(this.props.activeDoc.publishDate, true)\n                                            :\n                                                <TextPlaceholder\n                                                    height={\"1em\"}\n                                                    width={\"80px\"}\n                                                    marginBottom={false} />\n                                            }\n                                        </DocumentDate>\n                                        <StatsContainer>\n                                            <StatsBanner\n                                                tooltips={true}\n                                                active={true}\n                                                height={40}\n                                                time={{\n                                                    active: true,\n                                                    figure: this.props.activeDoc.readTime,\n                                                    iconColor: theme.white,\n                                                    textColor: this.props.readingPageStyle.nightMode ? theme.nightModeTextColor : theme.dayModeTextColor,\n                                                    handleClick: null\n                                                }}\n                                                upvotes={{\n                                                    active: true,\n                                                    figure: this.props.activeDoc.votes && this.props.activeDoc.votes.up && Object.keys(this.props.activeDoc.votes.up).length,\n                                                    iconColor: theme.white,\n                                                    textColor: this.props.activeDoc.votes && this.props.activeDoc.votes.up && this.props.activeDoc.votes.up[this.props.currentUser.uid] === true ? theme.purple : this.props.readingPageStyle.nightMode ? theme.nightModeTextColor : theme.dayModeTextColor,\n                                                    handleClick: () => {this.handleVote(DOCUMENT_VOTE_OPTIONS.UP)}\n                                                }}\n                                                downvotes={{\n                                                    active: true,\n                                                    figure: this.props.activeDoc.votes && this.props.activeDoc.votes.down && Object.keys(this.props.activeDoc.votes.down).length,\n                                                    iconColor: theme.white,\n                                                    textColor: this.props.activeDoc.votes && this.props.activeDoc.votes.down && this.props.activeDoc.votes.down[this.props.currentUser.uid] === true ? theme.purple : this.props.readingPageStyle.nightMode ? theme.nightModeTextColor : theme.dayModeTextColor,\n                                                    handleClick: () => {this.handleVote(DOCUMENT_VOTE_OPTIONS.DOWN)}\n                                                }}\n                                                insights={{\n                                                    active: true,\n                                                    figure: this.props.activeDoc.insightCount,\n                                                    iconColor: theme.white,\n                                                    textColor: this.props.readingPageStyle.nightMode ? theme.nightModeTextColor : theme.dayModeTextColor,\n                                                    handleClick: null\n                                                }}\n                                                contributors={{\n                                                    active: true,\n                                                    figure: this.props.activeDoc.contributors && Object.keys(this.props.activeDoc.contributors).length,\n                                                    iconColor: theme.white,\n                                                    textColor: this.props.readingPageStyle.nightMode ? theme.nightModeTextColor : theme.dayModeTextColor,\n                                                    handleClick: null\n                                                }}\n                                                views={{\n                                                    active: true,\n                                                    figure: this.props.activeDoc.views,\n                                                    iconColor: theme.white,\n                                                    textColor: this.props.readingPageStyle.nightMode ? theme.nightModeTextColor : theme.dayModeTextColor,\n                                                    handleClick: null\n                                                }} />\n                                        </StatsContainer>\n                                    </RightContent>\n                                    <ActionButtonsContainer>\n                                        <FilterableGroup\n                                            center={true}\n                                            width={\"auto\"}\n                                            direction={\"row\"}\n                                            items={this.state.actionButtons}\n                                            lineLock={true}>\n                                            {\n                                                Object.keys(this.state.actionButtons).filter( key => {\n                                                    return (key !== 'viewOriginal'\n                                                        || (this.props.activeDoc.type && this.props.activeDoc.type === ARTICLES_TYPE));\n                                                }).map(actionButton => {\n                                                    const button = this.state.actionButtons[actionButton];\n                                                    const Icon = button.icon;\n                                                    if (actionButton  === \"search\") {\n                                                        return (\n                                                            <ReadingPageSearchbar\n                                                                key={actionButton}\n                                                                itemname={actionButton}\n                                                                button={button}\n                                                                activeDoc={this.props.activeDoc}\n                                                                lockThreshold={this.state.scrollThreshold} />\n                                                        );\n                                                    } else {\n                                                        return (\n                                                            <ActionButton\n                                                                key={actionButton}\n                                                                tooltip={{\n                                                                    active: true,\n                                                                    info: button.title(),\n                                                                    at: \"bottom\"\n                                                                }}\n                                                                button={{\n                                                                    margin: true,\n                                                                    hover: true,\n                                                                    radius: 20,\n                                                                    height: 40,\n                                                                    width: 40,\n                                                                    fontColor: theme.white,\n                                                                    backgroundColor: theme[button.backgroundColor()],\n                                                                    handleClick: button.handleClick\n                                                                }}\n                                                                icon={{\n                                                                    active: true,\n                                                                    icon: Icon,\n                                                                    primarycolor: theme.white,\n                                                                    secondarycolor: theme.red\n                                                                }}\n                                                                text={{\n                                                                    content: button.text(),\n                                                                    color: theme.white\n                                                                }}\n                                                                itemname={actionButton}/>\n                                                        );\n                                                    }\n                                                })\n                                            }\n                                        </FilterableGroup>\n                                    </ActionButtonsContainer>\n                                    <DocumentVisibility>\n                                        {VisibilityIcon({\n                                            visibility: this.props.activeDoc.visibility ? this.props.activeDoc.visibility : Visibility.PUBLIC,\n                                            primarycolor: theme.white,\n                                            opacity: 0.38,\n                                            hover: false\n                                        })}\n                                    </DocumentVisibility>\n                                    <DocumentHeading\n                                        active={this.state.viewportScrollY > this.state.scrollThreshold}>\n                                        {this.props.activeDoc.title}\n                                    </DocumentHeading>\n                                </DocumentBanner>\n                                <DocumentPages\n                                    ref={this.documentPagesRef}\n                                    adjustMarginTop={this.state.viewportScrollY > this.state.scrollThreshold ? this.state.scrollThreshold + 30 : 0}\n                                    activeDoc={activeDoc}\n                                    cellUpdateTriggerProps={{\n                                        numInsights: Object.keys(activeDoc.insights || {}).length,\n                                        insightsIsActive: this.props.insightsIsActive,\n                                    }}\n                                    setCurrentPage={this.setCurrentPage}\n                                    isContextViewerPage={false}\n                                    windowScrollerEnabled={true}\n                                    viewportWidth={this.props.viewportWidth}\n                                    insightsIsActive={this.props.insightsIsActive}\n                                    pageIndex2Insights={this.props.pageIndex2Insights}\n                                    scrollElement={window}\n                                    shareMethodsWithParent={this.fetchScrollToMethod}\n                                />\n                                {this.props.viewportWidth > 900 &&\n                                    <InsightGraph\n                                        active={this.props.insightsIsActive}\n                                        width={70}\n                                        currentPage={this.state.currentPage}\n                                        data={this.props.pageInsightsCount}\n                                        scrollTo={index => this.scrollToPage(index)}\n                                        />\n                                }\n                                {this.props.userIsAnonymous &&\n                                this.props.userIsSignedIn &&\n                                    <SignUpButtonContainer>\n                                        <Button\n                                            margin={false}\n                                            padding={10}\n                                            hover={true}\n                                            radius={20}\n                                            height={40}\n                                            width={\"auto\"}\n                                            fontColor={theme.white}\n                                            primarycolor={theme.purple}\n                                            handleClick={() => {this.props.history.push(Views.LOGIN)}}>\n                                            New to Flowheap? Create an Account!\n                                        </Button>\n                                    </SignUpButtonContainer>\n                                }\n                                <AnnotationTools\n                                    active={this.state.showMobileAnnotationTools}>\n                                    <Button\n                                        margin={false}\n                                        padding={10}\n                                        hover={true}\n                                        radius={20}\n                                        height={40}\n                                        width={40}\n                                        fontColor={theme.white}\n                                        primarycolor={theme.yellow}\n                                        handleClick={() => {this.handleCreateAnnotation(AnnotationTypes.BASIC_INSIGHT)}}>\n                                        <InsightIcon\n                                            primarycolor={theme.white}\n                                            opacity={1}\n                                            hover={false} />\n                                    </Button>\n                                    <Button\n                                        margin={false}\n                                        padding={10}\n                                        hover={true}\n                                        radius={20}\n                                        height={40}\n                                        width={40}\n                                        fontColor={theme.white}\n                                        primarycolor={theme.yellow}\n                                        handleClick={() => {this.handleCreateAnnotation(AnnotationTypes.REPLY_INSIGHT)}}>\n                                        <QuoteIcon\n                                            primarycolor={theme.white}\n                                            opacity={1}\n                                            hover={false} />\n                                    </Button>\n                                </AnnotationTools>\n                                <InsightViewer />\n                                <DocumentStyleDialog\n                                    documentType={this.props.activeDoc.type} />\n                                <InsightDialog />\n                                <SearchDialog scrollToPage={this.scrollToPage}/>\n                                <ReadingToolbar />\n                            </ReadingInterface>\n                        </Container>\n                    );\n                }}\n            </ThemeContext.Consumer>\n        );\n    }\n\n    componentDidMount() {\n        //console.log(\"+++++ReadingPage\");\n        window.addEventListener(\"mouseup\", this.handleMouseUp);\n        window.addEventListener(\"touchend\", this.handleTouch);\n        window.addEventListener(\"touchmove\", this.handleTouch);\n        window.addEventListener(\"scroll\", this.handleScroll);\n\n        // Set Scroll Threshold\n        this.setState({\n            scrollThreshold: this.documentBanner.clientHeight - 30\n        });\n\n        if (this.props.activeDoc.type &&\n            this.props.activeDoc.uid &&\n            !this.state.docViewsIncremented) {\n            this.props.incrementDocumentViews(this.props.activeDoc.uid);\n            this.setState({\n                docViewsIncremented: true,\n            });\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.match.url !== this.props.match.url) {\n            nextProps.updateRouterState(nextProps.history, nextProps.match);\n        }\n\n        // Change Page Title\n        if (!this.props.activeDoc.title &&\n            nextProps.activeDoc.title &&\n            document.title !== nextProps.activeDoc.title) {\n            document.title = nextProps.activeDoc.title;\n        }\n\n        // Change Layout if Short Document\n        if (!this.props.activeDoc.type &&\n            nextProps.activeDoc.type &&\n            nextProps.activeDoc.type === DocumentTypes.ARTICLE &&\n            nextProps.activeDoc.numPages <= 10) {\n            nextProps.setPageLayout(false);\n        } else if (\n            !this.props.activeDoc.type &&\n            nextProps.activeDoc.type &&\n            (nextProps.activeDoc.type === DocumentTypes.EPUB ||\n            nextProps.activeDoc.type === DocumentTypes.ARTICLE && nextProps.activeDoc.numPages > 10)\n        ) {\n            nextProps.setPageLayout(true);\n        }\n\n        // Turn Off Insights if no Insights\n        if (!isEmpty(nextProps.activeDoc) && isEmpty(nextProps.activeDoc.insights) && nextProps.insightsIsActive) {\n            nextProps.showInsights(false);\n        } else if (!isEmpty(nextProps.activeDoc) && isEmpty(this.props.activeDoc.insights) && !isEmpty(nextProps.activeDoc.insights) && !nextProps.insightsIsActive) {\n            nextProps.showInsights(true);\n        }\n\n        // Take to last seen page\n        const currentUsersDocumentsCollection = nextProps.currentUsersDocumentsCollection;\n        const docUID = nextProps.activeDoc.uid;\n        if (!this.state.navigateToCurrentPage\n            && currentUsersDocumentsCollection\n            && currentUsersDocumentsCollection[docUID]\n            && currentUsersDocumentsCollection[docUID].currentPage >= 0) {\n            this.scrollToPage(currentUsersDocumentsCollection[docUID].currentPage);\n\n            // update state, no need to re-render here\n            this.state.navigateToCurrentPage = true;\n        }\n\n        // Reset Scroll Threshold\n        if (this.props.viewportWidth !== nextProps.viewportWidth) {\n            this.state.scrollThreshold = this.documentBanner.clientHeight - 30;\n            // Update if Style Dialog is open\n            if (this.props.documentStyleDialog.active) {\n                nextProps.setDocumentStyleDialog({\n                    ...this.props.documentStyleDialog,\n                    lockThreshold: this.documentBanner.clientHeight\n                });\n            }\n\n            if (this.props.readingPageInsightDialog.active) {\n                nextProps.setReadingPageInsightDialog({\n                    ...this.props.readingPageInsightDialog,\n                    lockThreshold: this.documentBanner.clientHeight\n                });\n            }\n        }\n\n        if (nextProps.activeDoc.type &&\n            nextProps.activeDoc.uid &&\n            nextProps.currentUser.uid &&\n            !this.state.currentSessionSent) {\n            // Start Session\n            let currentSession = {...this.state.currentSession};\n            if (!currentSession.doc) currentSession.doc= nextProps.activeDoc.uid;\n            if (!this.state.currentSessionSent) this.props.setDocumentSession(currentSession);\n            nextProps.setDocumentLastOpened(nextProps.activeDoc.uid);\n            this.setState({\n                currentSession: {...currentSession},\n                currentSessionSent: true\n            });\n        }\n\n        // Increment Document Views\n        if (nextProps.activeDoc.type &&\n            nextProps.activeDoc.uid &&\n            !this.state.docViewsIncremented) {\n            this.props.incrementDocumentViews(nextProps.activeDoc.uid);\n\n            this.setState({\n                docViewsIncremented: true\n            });\n        }\n\n        if (this.props.userIsAnonymous && !nextProps.userIsAnonymous && isEmpty(nextProps.connections)) {\n            nextProps.fetchUsersConnectionSummaries();\n        }\n\n        // Handle any parameters in the url\n        const {insightUID, userUID} = this.props.match.params;\n        if (insightUID && this.state.linkForSpecificInsight === ProcessUrlParameterStates.UNAWARE) {\n            this.handleInsightUrlParam();\n        } else if (userUID && this.state.linkForUsersInsights === ProcessUrlParameterStates.UNAWARE) {\n            this.handleUserUrlParam();\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"mouseup\", this.handleMouseUp);\n        window.removeEventListener(\"touchend\", this.handleTouch);\n        window.removeEventListener(\"touchmove\", this.handleTouch);\n        window.removeEventListener(\"scroll\", this.handleScroll);\n\n        // End Session\n        let currentSession = {...this.state.currentSession};\n        currentSession.timestamps.end = new Date().getTime();\n        this.props.setDocumentSession(currentSession);\n        this.props.resetInsightStore();\n        this.props.resetUnloadedReadingPageBucket();\n\n        if (this.props.readingPageSearchDialog.active) {\n            this.props.setReadingPageSearchDialog({\n                active: false\n            });\n        }\n    }\n\n    // ========== Methods ===========\n\n    handleScroll = (event) => {\n        this.updateViewportScroll(event);\n    };\n\n    updateViewportScroll = (e) => {\n        if (window.scrollY > this.state.scrollThreshold && this.state.viewportScrollY < this.state.scrollThreshold) {\n            this.setState({\n                viewportScrollY: window.scrollY\n            });\n        } else if (window.scrollY < this.state.scrollThreshold && this.state.viewportScrollY > this.state.scrollThreshold) {\n            this.setState({\n                viewportScrollY: window.scrollY\n            });\n        }\n    };\n\n    setCurrentPage = (index) => {\n        this.setState({\n            currentPage: index\n        }, () => {\n            // Set in Firestore\n            if (this.props.userIsSignedIn) {\n                this.props.setCurrentPage(this.props.activeDoc.uid, index);\n            }\n\n            // Look for Questions\n            if (this.props.activeDoc.insights && !this.props.insightsIsActive) {\n                const questionsOnPage = pickBy(this.props.activeDoc.insights, insight => {\n                    return insight.quote.text.index.page.start <= index\n                    && index <= insight.quote.text.index.page.end\n                    && insight.question === QuestionStates.UNRESOLVED_QUESTION;\n                });\n                const numQuestionsOnPage = Object.keys(questionsOnPage).length;\n                if (numQuestionsOnPage > 1) {\n                    const message = `There ${numQuestionsOnPage > 1 ? `are ${numQuestionsOnPage}` : \"is a\"} Question${numQuestionsOnPage > 1 ? \"s\" : \"\"} on Page ${index + 1}. Help spread knowledge by providing ${numQuestionsOnPage > 1 ? \"answers\" : \"answer\"}.`;\n                    this.props.setSnackbar({\n                        active: true,\n                        message: message,\n                        duration: 6000\n                    });\n                }\n            }\n        });\n    };\n\n    handleMouseUp = e => {\n        const target = e.target || e.srcElement;\n        if (target.classList.contains(\"ReactVirtualized__List\")) {\n            this.props.unstageAllMarginalia();\n        }\n        this.handleToolbarActivation(e);\n    };\n\n    handleTouch = (e) => {\n        this.handleToolbarActivation(e);\n    };\n\n    handleToolbarActivation = (e) => {\n        if (!this.props.isMobile &&\n            !this.props.readingToolbar.active &&\n            !this.props.insightViewerDialog.active &&\n            !this.props.newInsightDialog.active &&\n            !this.props.documentStyleDialog.active &&\n            !this.props.readingPageInsightDialog.active) {\n            const target = e.target || e.srcElement;\n            if (this.textSelected()) {\n                const data = this.getQuoteData();\n                this.props.setSelectionOrHighlightInsightData(data);\n                this.props.setReadingToolbar(\n                    true,\n                    e.clientX,\n                    e.clientY\n                )\n            } else if (target.nodeName.toLowerCase() === \"canvas\"\n                && target.classList.contains(\"react-pdf__Page__canvas\")) {\n                this.props.setReadingToolbar(\n                    true,\n                    e.clientX,\n                    e.clientY\n                )\n            }\n        } else if (\n            this.textSelected() &&\n            this.props.isMobile &&\n            !this.state.showMobileAnnotationTools) {\n            this.setState({\n                showMobileAnnotationTools: true\n            });\n        } else if (\n            !this.textSelected() &&\n            this.props.isMobile &&\n            this.state.showMobileAnnotationTools) {\n            this.setState({\n                showMobileAnnotationTools: false\n            });\n        }\n    };\n\n    getQuoteData = () => {\n        let data = {\n            index: {\n                bit: {\n                    start: Infinity,\n                    end: 0\n                },\n                paragraph: {\n                    start: Infinity,\n                    end: 0\n                },\n                page: {\n                    start: Infinity,\n                    end: 0\n                }\n            },\n            highlightText: \"\"\n        };\n\n        let mouseDownBit, mouseUpBit;\n        if (window.getSelection !== undefined &&\n            window.getSelection().toString().length > 0) {\n            mouseDownBit = window.getSelection().anchorNode.parentElement;\n            mouseUpBit = window.getSelection().focusNode.parentElement;\n        } else if (document.selection !== undefined &&\n                    document.selection.type === \"Text\" &&\n                    document.selection.createRange().text.length > 0) {\n            mouseDownBit = document.selection.anchorNode.parentElement;\n            mouseUpBit = document.selection.focusNode.parentElement;\n        }\n\n        const startBit = minBy([mouseDownBit, mouseUpBit], bit => parseInt(bit.getAttribute(\"data-bitindex\")));\n        const endBit = maxBy([mouseDownBit, mouseUpBit], bit => parseInt(bit.getAttribute(\"data-bitindex\")));\n\n        data.index.page.start = parseInt(startBit.getAttribute(\"data-pageindex\"));\n        data.index.page.end = parseInt(endBit.getAttribute(\"data-pageindex\"));\n        data.index.paragraph.start = parseInt(startBit.getAttribute(\"data-paragraphindex\"));\n        data.index.paragraph.end = parseInt(endBit.getAttribute(\"data-paragraphindex\"));\n        data.index.bit.start = parseInt(startBit.getAttribute(\"data-bitindex\"));\n        data.index.bit.end = parseInt(endBit.getAttribute(\"data-bitindex\"));\n\n        let highlightText = \"\";\n        for (let i = data.index.bit.start; i <= data.index.bit.end; i++) {\n            let bit = document.querySelector(`span[data-bitIndex=\"${i}\"]`);\n            highlightText += bit.innerText;\n        }\n        data.highlightText = highlightText.trim();\n        return data;\n    };\n\n    textSelected = () => {\n        if (window.getSelection !== undefined &&\n            window.getSelection().toString().length > 0) {\n            return true;\n        } else if (document.selection !== undefined &&\n                    document.selection.type === \"Text\" &&\n                    document.selection.createRange().text.length > 0) {\n            return true;\n        }\n        return false;\n    };\n\n    handleVote = (vote) => {\n        const updateObj = updateUserVoteInEntity(\n            this.props.activeDoc,\n            this.props.currentUser.uid,\n            DOCUMENT_VOTE_OPTIONS,\n            vote\n        );\n        this.props.updateDocument(this.props.activeDoc.uid, updateObj);\n    };\n\n    handleShelfAction = () => {\n        if (this.props.currentUserShelf[this.props.activeDoc.uid]) {\n            this.props.removeDocumentFromShelf(this.props.activeDoc.uid);\n            const message = `Removed \"${this.props.activeDoc.title}\" from your Shelf.`;\n            this.props.setSnackbar({\n                active: true,\n                message: message,\n                duration: 5000\n            });\n        } else {\n            this.props.addDocumentToShelf(this.props.activeDoc.uid);\n            const message = `Added \"${this.props.activeDoc.title}\" to your Shelf.`;\n            this.props.setSnackbar({\n                active: true,\n                message: message,\n                duration: 5000\n            });\n        }\n    };\n\n    handleCreateAnnotation = annotationType => {\n        const data = this.getQuoteData();\n        this.props.setSelectionOrHighlightInsightData(data);\n        this.props.setNewInsightDialog({\n            active: true,\n            type: annotationType\n        });\n    };\n\n    handleModifyStyleDialogActivation = (e) => {\n        e.stopPropagation();\n        let styleButton = e.target;\n        while (styleButton.tagName !== \"BUTTON\") {\n            styleButton = styleButton.parentElement;\n        }\n        const styleButtonRect = styleButton.getBoundingClientRect();\n        this.props.setDocumentStyleDialog({\n            active: !this.props.documentStyleDialog.active,\n            x: !this.props.documentStyleDialog.active ? styleButtonRect.x + styleButtonRect.width : this.props.documentStyleDialog.x,\n            y: !this.props.documentStyleDialog.active ? styleButtonRect.y + styleButtonRect.height : this.props.documentStyleDialog.y,\n            lockThreshold: !this.props.documentStyleDialog.active ? this.state.scrollThreshold : this.props.documentStyleDialog.lockThreshold,\n            activatedUnlocked: !this.props.documentStyleDialog.active ? window.scrollY < this.state.scrollThreshold : this.props.documentStyleDialog.activatedUnlocked\n        });\n\n        if (this.props.readingPageInsightDialog.active) {\n            this.props.setReadingPageInsightDialog({\n                active: false,\n                x: this.props.readingPageInsightDialog.x,\n                y: this.props.readingPageInsightDialog.y,\n                lockThreshold: this.props.readingPageInsightDialog.lockThreshold,\n                activatedUnlocked: this.props.readingPageInsightDialog.activatedUnlocked\n            });\n        }\n    };\n\n    handleModifyInsightDialogActivation = (e) => {\n        e.stopPropagation();\n        let insightButton = e.target;\n        while (insightButton.tagName !== \"BUTTON\") {\n            insightButton = insightButton.parentElement;\n        }\n        const insightButtonRect = insightButton.getBoundingClientRect();\n        this.props.setReadingPageInsightDialog({\n            active: !this.props.readingPageInsightDialog.active,\n            x: !this.props.readingPageInsightDialog.active ? insightButtonRect.x + insightButtonRect.width : this.props.readingPageInsightDialog.x,\n            y: !this.props.readingPageInsightDialog.active ? insightButtonRect.y + insightButtonRect.height : this.props.readingPageInsightDialog.y,\n            lockThreshold: !this.props.readingPageInsightDialog.active ? this.state.scrollThreshold : this.props.readingPageInsightDialog.lockThreshold,\n            activatedUnlocked: !this.props.readingPageInsightDialog.active ? window.scrollY < this.state.scrollThreshold : this.props.readingPageInsightDialog.activatedUnlocked\n        });\n\n        if (this.props.documentStyleDialog.active) {\n            this.props.setDocumentStyleDialog({\n                active: false,\n                x: this.props.documentStyleDialog.x,\n                y: this.props.documentStyleDialog.y,\n                lockThreshold: this.props.documentStyleDialog.lockThreshold,\n                activatedUnlocked: this.props.documentStyleDialog.activatedUnlocked\n            });\n        }\n    };\n\n    // used to hoist up the the 'scrollToPage' method inside of the\n    // <DocumentPages> component since that component now tracks\n    // the scrollToIndex part of state\n    fetchScrollToMethod = (scrollTo) => { this.documentPagesScrollTo = scrollTo };\n\n    scrollToPage = pageIndex => {\n        if (this.documentPagesScrollTo) {\n            console.log('scrollToPage', pageIndex);\n            this.documentPagesScrollTo(pageIndex)\n        }\n    };\n\n    handleInsightUrlParam = () => {\n        this.state.linkForSpecificInsight = ProcessUrlParameterStates.COMPLETED;\n        this.props.setSelectedInsight({\n            insightUID: this.props.match.params.insightUID,\n            insightViewerMode: InsightViewerModes.SPECIFIC_INSIGHT\n        })\n    };\n\n    handleUserUrlParam = () => {\n        this.state.linkForUsersInsights = ProcessUrlParameterStates.COMPLETED;\n        this.props.setSelectedInsight({\n            userUID: this.props.match.params.userUID,\n            insightViewerMode: InsightViewerModes.INDIVIDUAL_USER\n        })\n    };\n}\n\n// ============= Styled Components ==============\n\nconst Container = styled.div`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    transition: margin-top 0.3s;\n`;\n\nconst ReadingInterface = styled.div`\n    position: relative;\n    width: 100%;\n    transition: width 0.3s;\n`;\n\nconst DocumentBanner = styled.div`\n    position: ${props => props.fixToViewport ? \"fixed\" : \"relative\"};\n    top: ${props => props.fixToViewport ? \"0px\" : \"auto\"};\n    display: flex;\n    flex-direction: row;\n    background    : ${props => props.nightMode ? props.theme.black : props.theme.darkGray};\n    box-shadow    : 0 1px 3px rgba(0,0,0,.12), 0 1px 2px rgba(0,0,0,.24);\n    width: 100%;\n    min-height: 30vh;\n    padding: 50px 100px 50px;\n    z-index: 1;\n    transform: ${props => props.fixToViewport ? \"translateY(calc(-100% + 30px))\" : \"none\"};\n    transition: background 0.3s;\n\n    @media (max-width: 900px) {\n        flex-direction: column;\n        padding: 30px;\n        padding-top: 70px;\n    }\n`;\n\nconst LeftContent = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    height: 250px;\n\n    @media (max-width: 900px) {\n        justify-content: center;\n        height: auto;\n    }\n`;\n\nconst RightContent = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding-left: 30px;\n    margin-top: 0px;\n\n    @media (max-width: 900px) {\n        padding-left: 0px;\n        margin-top: 50px;\n    }\n`;\n\nconst DocumentCover = styled.div`\n    height: 100%;\n    background: ${props => props.theme.lightGray};\n    border-radius: 5px;\n    box-shadow: 0 1px 3px rgba(0,0,0,.12), 0 1px 2px rgba(0,0,0,.24);\n\n    & img {\n        height: 100%;\n        border-radius: 5px;\n\n        @media (max-width: 900px) {\n            height: auto;\n            max-width: 100%;\n        }\n    }\n\n    @media (max-width: 900px) {\n        height: auto;\n    }\n`;\n\nconst DocumentTitle = styled.div`\n    font-size  : 2em;\n    font-weight: 800;\n    color: ${props => props.theme.white};\n    margin: 0;\n    margin-bottom: 20px;\n\n    @media (max-width: 900px) {\n        text-align: center;\n        margin: 0 auto;\n        margin-bottom: 20px;\n    }\n`;\n\nconst DocumentAuthor = styled.div`\n    font-size: 1.3em;\n    font-weight: 600;\n    color: ${props => props.nightMode ? props.theme.nightModeTextColor : props.theme.dayModeTextColor};\n    margin: 0;\n    margin-bottom: 10px;\n    transition: color 0.3s;\n\n    @media (max-width: 900px) {\n        padding-left: 0px;\n        margin: 0 auto;\n        margin-top: 20px;\n        margin-bottom: 20px;\n        text-align: center;\n    }\n`;\n\nconst DocumentDate = styled.div`\n    font-size: 1em;\n    font-weight: 500;\n    color: ${props => props.theme.gray};\n    margin: 0;\n\n    @media (max-width: 900px) {\n        margin: 0 auto;\n        text-align: center;\n    }\n`;\n\nconst StatsContainer = styled.div`\n    margin: 0;\n    margin-top: 40px;\n\n    @media (max-width: 900px) {\n        margin: 0 auto;\n        margin-top: 40px;\n    }\n`;\n\nconst ActionButtonsContainer = styled.div`\n    position: absolute;\n    bottom: 0;\n    right: 10px;\n    transform: translateY(50%);\n    z-index: 1;\n\n    @media (max-width: 900px) {\n        right: 50%;\n        transform: translate(50%, 50%);\n    }\n`;\n\nconst DocumentVisibility = styled.div`\n    position       : absolute;\n    display        : flex;\n    align-items    : center;\n    justify-content: center;\n    top            : 40px;\n    right          : 40px;\n    width          : 50px;\n    height         : 50px;\n\n    @media (max-width: 900px) {\n        top            : 20px;\n        right          : 20px;\n        width          : 30px;\n        height         : 30px;\n    }\n`;\n\nconst SignUpButtonContainer = styled.div`\n    position: fixed;\n    bottom: 30px;\n    left: 50%;\n    transform: translateX(-50%);\n    z-index: 2;\n\n    & button {\n        font-size: 0.8em;\n        padding: 12px;\n    }\n\n    & button:hover {\n        font-size: 0.9em;\n    }\n`;\n\nconst AnnotationTools = styled.div`\n    display: flex;\n    visibility: ${props => props.active ? \"visible\" : \"hidden\"};\n    opacity: ${props => props.active ? 1 : 0};\n    flex-direction: column;\n    justify-content: space-between;\n    position: fixed;\n    top: 50%;\n    transform: translateY(-50%);\n    right: 20px;\n    height: 90px;\n    transition: visibility 0.3s, opacity 0.3s;\n`;\n\nconst DocumentHeading = styled.div`\n    display: ${props => props.active ? \"block\" : \"none\"};\n    position: absolute;\n    bottom: 2.5px;\n    left: 80px;\n    color: ${props => props.theme.white};\n    font-weight: 600;\n    font-size: 1em;\n\n    @media (max-width: 900px) {\n        display: none;\n    }\n`;\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    ),\n    firestoreConnect((props) => {\n        const pagesBucketIndex = props.unloadedDocumentPagesBucket;\n        const docUID = props.match.params.uid;\n        const currentDocumentCondition = ['doc', '==', docUID];\n\n        const pagesQuery = [\n            {\n                collection: DOCUMENTS_COLLECTION,\n                doc: docUID,\n                storeAs: `${DOCUMENTS_COLLECTION}.${docUID}`\n            },\n            {\n                collection: `${DOCUMENTS_COLLECTION}/${docUID}/${PAGES_COLLECTION}`,\n                startAt: pagesBucketIndex * PAGES_BUCKET_SIZE,\n                orderBy: ['index.pageIndex'],\n                limit: PAGES_BUCKET_SIZE,\n                storeAs: `${DOCUMENTS_COLLECTION}.${docUID}.${PAGES_COLLECTION}.${pagesBucketIndex}`\n            },\n            {\n                collection: `${DOCUMENTS_COLLECTION}/${docUID}/${SEARCH_COLLECTION}`,\n                storeAs: `${DOCUMENTS_COLLECTION}.${docUID}.${SEARCH_COLLECTION}`\n            },\n        ];\n\n        const authorQuery = (\n            props.authorUID\n            && [{\n                    collection: USERS_COLLECTION,\n                    doc: props.authorUID,\n                    storeAs: `${USERS_COLLECTION}.${props.authorUID}`\n                }]\n        ) || [];\n\n        const contributorsQuery = (\n            props.activeDoc.contributors\n            && Object.keys(props.activeDoc.contributors).map(userUID => {\n                return {\n                    collection: USERS_COLLECTION,\n                    doc: userUID,\n                    storeAs: `${USERS_COLLECTION}.${userUID}`\n                }\n            })\n        ) || [];\n\n        let insightsQuery = [];\n        let usersDocumentsCollectionQuery = [];\n        if (props.currentUser && props.currentUser.uid) {\n            const currentUserUID = props.currentUser.uid;\n            insightsQuery = insightsQueryFromCondition(\n                currentUserUID,\n                currentDocumentCondition,\n                InsightVariantTypes.BASIC\n            );\n            usersDocumentsCollectionQuery = [{\n                collection: `${USERS_COLLECTION}/${currentUserUID}/${USER_DOCUMENTS_COLLECTION}`,\n                storeAs: `${USERS_COLLECTION}.${currentUserUID}.${USER_DOCUMENTS_COLLECTION}`\n            }]\n        } else {\n            insightsQuery = [{\n                collection: INSIGHTS_COLLECTION,\n                where: [\n                    ['visibility.type', '==', Visibility.PUBLIC],\n                    currentDocumentCondition,\n                    ['variant','==', InsightVariantTypes.BASIC],\n                ],\n                storeAs: `${INSIGHTS_COLLECTION}`,\n            }]\n        }\n\n        return [\n            ...contributorsQuery,\n            ...usersDocumentsCollectionQuery,\n            ...pagesQuery,\n            ...authorQuery,\n            ...insightsQuery,\n        ];\n    }),\n    withFirebase,\n    withFirestore\n)(ReadingPage);\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/ReadingPage/ReadingPage.js	(revision 5e45e31694cda276c5e7c802d69123e978dcb609)
+++ app/components/ReadingPage/ReadingPage.js	(date 1543806291537)
@@ -1160,8 +1160,8 @@
     fetchScrollToMethod = (scrollTo) => { this.documentPagesScrollTo = scrollTo };
 
     scrollToPage = pageIndex => {
+        console.log('ReadingPage scrollToPage', pageIndex);
         if (this.documentPagesScrollTo) {
-            console.log('scrollToPage', pageIndex);
             this.documentPagesScrollTo(pageIndex)
         }
     };
Index: app/components/ContextViewer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Libs\nimport React                            from 'react';\nimport PropTypes                        from 'prop-types';\nimport styled                           from 'styled-components';\nimport {ThemeContext}                   from '../themes/theme-context';\nimport uuid                             from 'uuid';\nimport Img                              from 'react-image';\nimport { Document }                     from 'react-pdf/dist/entry.webpack'; // IMPORTANT: we need this for pdf viewer\nimport { connect }                      from 'react-redux';\nimport { compose }                      from 'redux';\nimport {\n    firestoreConnect,\n    withFirebase,\n    withFirestore,\n    isEmpty,\n}                                       from 'react-redux-firebase';\nimport {\n    pickBy\n}                                       from 'lodash';\n\nimport {\n    insightShouldBeVisibleToViewingUser,\n    insightsQueryFromCondition\n}                                       from '../actions/Utils';\n\n// Components\nimport TimeBeforeFormat                 from './HOC/TimeBeforeFormat';\nimport TextPlaceholder                  from './TextPlaceholder';\nimport Loader                           from './Loader';\nimport VirtualizedList                  from './ReactVirtualizedComponents/VirtualizedList';\nimport PDFPage                          from './ReadingPage/DocumentAssets/PDFPage';\nimport Page                             from './ReadingPage/DocumentAssets/Page';\nimport DocumentPages from './ReadingPage/DocumentPages';\n\n// Custom Modules\nimport firestoreUtils                   from '../../functions/utils/Firestore';\nimport Visibility                       from '../constants/visibility';\nimport Views                            from '../constants/views';\nimport InsightVariantTypes              from '../constants/insightVariantTypes';\n\n// Constants\nconst PAGES_COLLECTION = firestoreUtils.collections.documents.pages.NAME;\nconst INSIGHTS_COLLECTION = firestoreUtils.collections.insights.NAME;\nconst DOCUMENTS_COLLECTION = firestoreUtils.collections.documents.NAME;\nconst USERS_COLLECTION = firestoreUtils.collections.users.NAME;\nconst PAGES_BUCKET_SIZE = firestoreUtils.collections.documents.pages.LOAD_BUCKET_SIZE;\nconst PDF_DOCUMENT_TYPE = firestoreUtils.PDF_TYPE;\n\nconst mapStateToProps = (state, props) => {\n    const currentUser = state.profile.currentUser.metadata;\n    const currentUserUID = currentUser.uid;\n    const firestoreData = state.firestore.data;\n    const docUID = props.insight.doc;\n    const insightsCollection = firestoreData[INSIGHTS_COLLECTION] || {};\n    let contextDoc = {};\n    let authorUID = \"\";\n    let authorData = {};\n\n    if (firestoreData\n        && insightsCollection\n        && firestoreData[DOCUMENTS_COLLECTION]\n        && firestoreData[DOCUMENTS_COLLECTION][docUID]\n        && currentUserUID\n    ) {\n        const Insights = pickBy(insightsCollection, insight =>\n            insight &&\n            insight.doc === docUID\n            && insightShouldBeVisibleToViewingUser(insight, currentUserUID)\n        );\n        const {Pages, ...docMetadata} = firestoreData[DOCUMENTS_COLLECTION][docUID];\n        contextDoc = {\n            ...docMetadata,\n            insights: Insights,\n            pages: Pages,\n        };\n        authorUID = contextDoc.author;\n    }\n\n    if (state.firestore.data &&\n        authorUID &&\n        authorUID.length > 0 &&\n        state.firestore.data[USERS_COLLECTION] &&\n        state.firestore.data[USERS_COLLECTION][authorUID]) {\n        authorData = {\n            ...state.firestore.data[USERS_COLLECTION][authorUID]\n        }\n    }\n\n    return {\n        unloadedDocumentPagesBucket: state.app.unloadedDocumentPagesBucket,\n        currentUser,\n        contextDoc,\n        isMobile: state.app.isMobile,\n        authorUID,\n        authorData,\n        seeInContext: state.insights.seeInContext,\n        readingPageStyle: state.app.readingPageStyle,\n        appView: state.app.appView\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n  };\n};\n\n/**\n * The ContextViewer component is a component used to\n */\nclass ContextViewer extends React.Component {\n    // ============= PropTypes ==============\n    static propTypes = {\n        active: PropTypes.bool.isRequired,\n        insight: PropTypes.object.isRequired,\n        contextDoc: PropTypes.object.isRequired,\n        currentUser: PropTypes.object.isRequired,\n        isMobile: PropTypes.bool.isRequired,\n        readingPageStyle: PropTypes.object.isRequired,\n        appView: PropTypes.string.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            recomputeViewerWidth: false,\n            viewerWidth: 0,\n        }\n    }\n\n    componentWillMount() {\n        //console.log(\"-----ContextViewer\");\n    }\n\n    render(){\n        return (\n            <ThemeContext.Consumer>\n                {theme => {\n                    return (\n                        <Container\n                            innerRef={comp => this.contextContainer = comp}\n                            nightMode={this.props.readingPageStyle.nightMode}\n                            appView={this.props.appView}>\n                            <ReadingInterface>\n                                <DocumentBanner\n                                    nightMode={this.props.readingPageStyle.nightMode}\n                                    appView={this.props.appView}\n                                    innerRef={comp => this.contextDocumentBanner = comp}>\n                                    <DocumentTitle>\n                                            {this.props.contextDoc.title ?\n                                                this.props.contextDoc.title\n                                            :\n                                                <TextPlaceholder\n                                                    height={\"2em\"}\n                                                    width={this.state.viewportWidth > 900 ? \"300px\" : \"200px\"}\n                                                    marginBottom={false} />\n                                            }\n                                    </DocumentTitle>\n                                    <DocumentAuthor\n                                        nightMode={this.props.readingPageStyle.nightMode}\n                                        appView={this.props.appView}>\n                                        {Object.keys(this.props.authorData).length > 0 && this.props.authorData.name.fullName ?\n                                            this.props.authorData.name.fullName\n                                        :\n                                            this.props.contextDoc.type === PDF_DOCUMENT_TYPE ?\n                                                this.props.contextDoc.author\n                                            :\n                                                <TextPlaceholder\n                                                    height={\"1.3em\"}\n                                                    width={\"150px\"}\n                                                    marginBottom={false} />\n                                        }\n                                    </DocumentAuthor>\n                                    <DocumentDate>\n                                        {this.props.contextDoc.publishDate ?\n                                            TimeBeforeFormat(this.props.contextDoc.publishDate, true)\n                                        :\n                                            <TextPlaceholder\n                                                height={\"1em\"}\n                                                width={\"80px\"}\n                                                marginBottom={false} />\n                                        }\n                                    </DocumentDate>\n                                </DocumentBanner>\n                                {this.state.viewerWidth > 0 &&\n                                    <DocumentPages\n                                        scrollElement={this.props.scrollElement}\n                                        activeDoc={this.props.contextDoc}\n                                        viewportWidth={this.state.viewerWidth}\n                                        setCurrentPage={()=>{}}\n                                        isContextViewerPage={true}\n                                        windowScrollerEnabled={true}\n                                        insightsIsActive={false}\n                                        cellUpdateTriggerProps={{}}\n                                        pageIndex2Insights={{}}\n                                    />\n                                }\n                            </ReadingInterface>\n                        </Container>\n                    );\n                }}\n            </ThemeContext.Consumer>\n        );\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.active) {\n            this.setState({recomputeViewerWidth: true});\n        }\n    }\n\n    componentDidMount() {\n        //console.log(\"+++++ContextViewer\");\n        this.setState({\n            viewerWidth: this.contextContainer.clientWidth,\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.recomputeViewerWidth) {\n            this.setState({\n                recomputeViewerWidth: false,\n                viewerWidth: this.contextContainer.clientWidth,\n            });\n        }\n    }\n\n    // ========== Methods ===========\n\n}\n\n// ============= Styled Components ==============\n\nconst Container = styled.div`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    background: ${props => props.nightMode && props.appView.includes(Views.READING) ? props.theme.pitchBlack : props.theme.lightGray};\n    transition: background 0.3s;\n`;\n\nconst ReadingInterface = styled.div`\n    position: relative;\n    width: 100%;\n`;\n\nconst DocumentBanner = styled.div`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    background: ${props => props.nightMode && props.appView.includes(Views.READING) ? props.theme.black : props.theme.darkGray};\n    box-shadow: 0 1px 3px rgba(0,0,0,.12), 0 1px 2px rgba(0,0,0,.24);\n    width: 100%;\n    padding: 20px;\n    z-index: 1;\n    transition: background 0.3s;\n`;\n\nconst DocumentTitle = styled.div`\n    font-size  : 1.2em;\n    font-weight: 700;\n    color: ${props => props.theme.white};\n    margin: 0;\n    margin-bottom: 20px;\n`;\n\nconst DocumentAuthor = styled.div`\n    font-size: 1em;\n    font-weight: 600;\n    color: ${props => props.nightMode && props.appView.includes(Views.READING) ? props.theme.nightModeTextColor : props.theme.dayModeTextColor};\n    margin: 0;\n    margin-bottom: 10px;\n    transition: color 0.3s;\n`;\n\nconst DocumentDate = styled.div`\n    font-size: 0.8em;\n    font-weight: 500;\n    color: ${props => props.theme.gray};\n    margin: 0;\n`;\n\nconst Content = styled.div`\n    position: relative;\n    width: 100%;\n    min-height: calc(100vh - 350px);\n    height: auto;\n    padding: 10px 10px;\n`;\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    ),\n    firestoreConnect((props) => {\n        const pagesBucketIndex = props.unloadedDocumentPagesBucket;\n        const docUID = props.insight.doc;\n        return [\n            {\n                collection: DOCUMENTS_COLLECTION,\n                doc: docUID,\n                storeAs: `${DOCUMENTS_COLLECTION}.${docUID}`\n            },{\n                collection: `${DOCUMENTS_COLLECTION}/${docUID}/${PAGES_COLLECTION}`,\n                startAt: pagesBucketIndex * PAGES_BUCKET_SIZE,\n                orderBy: ['index.pageIndex'],\n                limit: PAGES_BUCKET_SIZE,\n                storeAs: `${DOCUMENTS_COLLECTION}.${docUID}.${PAGES_COLLECTION}.${pagesBucketIndex}`\n            }\n        ];\n    }),\n    withFirebase,\n    withFirestore\n)(ContextViewer);\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/ContextViewer.js	(revision 5e45e31694cda276c5e7c802d69123e978dcb609)
+++ app/components/ContextViewer.js	(date 1543795449905)
@@ -3,16 +3,12 @@
 import PropTypes                        from 'prop-types';
 import styled                           from 'styled-components';
 import {ThemeContext}                   from '../themes/theme-context';
-import uuid                             from 'uuid';
-import Img                              from 'react-image';
-import { Document }                     from 'react-pdf/dist/entry.webpack'; // IMPORTANT: we need this for pdf viewer
 import { connect }                      from 'react-redux';
 import { compose }                      from 'redux';
 import {
     firestoreConnect,
     withFirebase,
     withFirestore,
-    isEmpty,
 }                                       from 'react-redux-firebase';
 import {
     pickBy
@@ -26,17 +22,11 @@
 // Components
 import TimeBeforeFormat                 from './HOC/TimeBeforeFormat';
 import TextPlaceholder                  from './TextPlaceholder';
-import Loader                           from './Loader';
-import VirtualizedList                  from './ReactVirtualizedComponents/VirtualizedList';
-import PDFPage                          from './ReadingPage/DocumentAssets/PDFPage';
-import Page                             from './ReadingPage/DocumentAssets/Page';
 import DocumentPages from './ReadingPage/DocumentPages';
 
 // Custom Modules
 import firestoreUtils                   from '../../functions/utils/Firestore';
-import Visibility                       from '../constants/visibility';
 import Views                            from '../constants/views';
-import InsightVariantTypes              from '../constants/insightVariantTypes';
 
 // Constants
 const PAGES_COLLECTION = firestoreUtils.collections.documents.pages.NAME;
@@ -280,14 +270,6 @@
     margin: 0;
 `;
 
-const Content = styled.div`
-    position: relative;
-    width: 100%;
-    min-height: calc(100vh - 350px);
-    height: auto;
-    padding: 10px 10px;
-`;
-
 export default compose(
     connect(
         mapStateToProps,
