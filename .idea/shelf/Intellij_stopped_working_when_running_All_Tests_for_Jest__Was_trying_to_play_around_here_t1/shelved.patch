Index: app/components/ReactionBar.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Packages\r\nimport React            from 'react';\r\nimport PropTypes        from 'prop-types';\r\nimport styled           from 'styled-components';\r\nimport { connect }      from 'react-redux';\r\nimport {ThemeContext}   from '../themes/theme-context';\r\nimport {\r\n    get, reduce,\r\n} from 'lodash';\r\n\r\n// Components\r\nimport ReactionIcon     from './Icons/ReactionIcon';\r\nimport LikeIcon from \"./Icons/LikeIcon\";\r\nimport LaughIcon from \"./Icons/LaughIcon\";\r\nimport LoveIcon from \"./Icons/LoveIcon\";\r\nimport SadIcon from \"./Icons/SadIcon\";\r\nimport SurprisedIcon from \"./Icons/SurprisedIcon\";\r\nimport AngryIcon from \"./Icons/AngryIcon\";\r\n\r\n// Custom Modules\r\nimport firestoreUtils from '../../functions/utils/Firestore';\r\nimport insightVariantTypes from \"../constants/insightVariantTypes\";\r\nimport InsightNotificationCRUDer from \"../actions/Notifications/InsightNotificationCRUDer\";\r\nimport ReplyInsightNotificationCRUDer from \"../actions/Notifications/ReplyInsightNotificationCRUDer\";\r\nimport {InsightCRUDer} from \"../actions/Insights/InsightCRUDer\";\r\n\r\n// Constants\r\nconst Feedback = firestoreUtils.feedback;\r\nconst INSIGHT_REACTION_OPTIONS = firestoreUtils.feedback.reactions.values;\r\n\r\n\r\nconst mapStateToProps = (state, props) => {\r\n    let optionalProps = {};\r\n    if (props.storeDataPath) {\r\n        optionalProps = {\r\n            ...optionalProps,\r\n            data: get(state, ['firestore', 'data', ...props.storeDataPath], {})\r\n        }\r\n    }\r\n    \r\n    return {\r\n        isMobile: state.app.isMobile,\r\n        viewportWidth: state.app.viewportDimensions.width,\r\n        ...optionalProps,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n  };\r\n};\r\n\r\n/**\r\n * The ReactionBar component is a component used to\r\n */\r\nclass ReactionBar extends React.PureComponent {\r\n    // ============= PropTypes ==============\r\n    \r\n    static propTypes = {\r\n        data: props => {\r\n            if (props.data) {\r\n                const insight = props.data;\r\n                const reactionCounts = insight.counts.reactions;\r\n                if (!(\r\n                    INSIGHT_REACTION_OPTIONS.LIKE in reactionCounts\r\n                    && INSIGHT_REACTION_OPTIONS.LAUGH in reactionCounts\r\n                    && INSIGHT_REACTION_OPTIONS.LOVE in reactionCounts\r\n                    && INSIGHT_REACTION_OPTIONS.SAD in reactionCounts\r\n                    && INSIGHT_REACTION_OPTIONS.SURPRISE in reactionCounts\r\n                    && INSIGHT_REACTION_OPTIONS.ANGRY in reactionCounts\r\n                    && insight.uid\r\n                    && insight.variant\r\n                )) {\r\n                    return new Error(\"ERROR: data prop requires the fields 'counts.reactions' for each reaction,\" +\r\n                        \"'uid', and 'variant'. At least one of these was missing: \\n\" + JSON.stringify(props.data, null, 4));\r\n                }\r\n            }\r\n        },\r\n        storeDataPath: PropTypes.arrayOf(PropTypes.string),\r\n        isMobile: PropTypes.bool.isRequired,\r\n        viewportWidth: PropTypes.number.isRequired,\r\n        readOnly: PropTypes.bool.isRequired,\r\n        onReactionClick: props => {\r\n            if (!props.storeDataPath) {\r\n                if (!props.onReactionClick) {\r\n                    return new Error(\"ERROR: Prop 'onReactionClick' must be supplied when prop \" +\r\n                        \"'storeDataPath' is not supplied. Neither 'storeDataPath' nor 'onReactionClick' \" +\r\n                        \"were supplied.\"\r\n                    )\r\n                } else if (typeof props.onReactionClick !== 'function') {\r\n                    return new Error(`ERROR: Prop 'onReactionClick' must be a Function but was ${typeof props.onReactionClick}`)\r\n                }\r\n            }\r\n        },\r\n        alwaysOpen: PropTypes.bool.isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            reactionButtons: {\r\n                like: {\r\n                    type: INSIGHT_REACTION_OPTIONS.LIKE,\r\n                    icon: LikeIcon,\r\n                    name: 'Like',\r\n                },\r\n                laugh: {\r\n                    type: INSIGHT_REACTION_OPTIONS.LAUGH,\r\n                    icon: LaughIcon,\r\n                    name: 'Laugh',\r\n                },\r\n                love: {\r\n                    type: INSIGHT_REACTION_OPTIONS.LOVE,\r\n                    icon: LoveIcon,\r\n                    name: 'Love',\r\n                },\r\n                sad: {\r\n                    type: INSIGHT_REACTION_OPTIONS.SAD,\r\n                    icon: SadIcon,\r\n                    name: 'Sad',\r\n                },\r\n                surprise: {\r\n                    type: INSIGHT_REACTION_OPTIONS.SURPRISE,\r\n                    icon: SurprisedIcon,\r\n                    name: 'Surprised',\r\n                },\r\n                angry: {\r\n                    type: INSIGHT_REACTION_OPTIONS.ANGRY,\r\n                    icon: AngryIcon,\r\n                    name: 'Angry',\r\n                },\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        //console.log(\"-----ReactionBar\");\r\n    }\r\n\r\n    render() {\r\n        let nonZeroReactionButtons,\r\n            allReactionButtons;\r\n        \r\n        if (this.props.data) {\r\n            const temp = reduce(this.props.data.counts.reactions, (acc, count, reactionType) => {\r\n                if (reactionType === 'dislike') { return acc }\r\n                \r\n                const reactionObj = {\r\n                    ...this.state.reactionButtons[reactionType],\r\n                    count,\r\n                };\r\n                if (count > 0) {\r\n                    acc.nonZeroReactionButtons.push(reactionObj);\r\n                }\r\n                acc.allReactionButtons.push(reactionObj);\r\n                return acc;\r\n            }, {nonZeroReactionButtons: [], allReactionButtons: []});\r\n            nonZeroReactionButtons = temp.nonZeroReactionButtons;\r\n            allReactionButtons = temp.allReactionButtons;\r\n        } else {\r\n            nonZeroReactionButtons = [];\r\n            allReactionButtons = [];\r\n        }\r\n    \r\n        return (\r\n            <ThemeContext.Consumer>\r\n                {theme => {\r\n                    return (\r\n                        <Container\r\n                            open={this.state.open || this.props.alwaysOpen}\r\n                            {...(!this.props.isMobile && !this.props.readOnly ? {\r\n                                onMouseEnter: () => {this.handleOpen(true)},\r\n                                onMouseLeave: () => {this.handleOpen(false)}\r\n                            } : {})}\r\n                            numActiveReactions={nonZeroReactionButtons.length}\r\n                            hasBoxShadow={!this.props.readOnly}>\r\n                            <MainReactionIconContainer\r\n                                data-tooltip\r\n                                data-tooltip-at={\"top\"}\r\n                                data-info={\"Reactions\"}\r\n                                {...(this.props.isMobile && !this.props.readOnly ? {\r\n                                    onClick: () => {this.handleOpen(!this.state.open)}\r\n                                } : {})}\r\n                                length={20}>\r\n                                <ReactionIcon\r\n                                    primarycolor={theme.black}\r\n                                    opacity={0.60}\r\n                                    hover={false} />\r\n                            </MainReactionIconContainer>\r\n                            {this.state.open || this.props.alwaysOpen ?\r\n                                allReactionButtons.map(button => {\r\n                                    const Icon = button.icon;\r\n                                    return (\r\n                                        <ReactionButton\r\n                                            key={`reaction=${button.name}`}\r\n                                            numButtons={allReactionButtons.length}\r\n                                            onClick={() => {\r\n                                                if (this.props.storeDataPath) {\r\n                                                    this.updateEntityReactions(button.type)\r\n                                                } else {\r\n                                                    this.props.onReactionClick(button.type);\r\n                                                }\r\n                                                this.handleOpen(false, true);\r\n                                            }}>\r\n                                            <ReactionIconContainer\r\n                                                data-tooltip\r\n                                                data-tooltip-at={\"top\"}\r\n                                                data-info={button.name}\r\n                                                length={20}>\r\n                                                <Icon\r\n                                                    primarycolor={theme.black}\r\n                                                    opacity={0.38}\r\n                                                    hover={false} />\r\n                                            </ReactionIconContainer>\r\n                                            <ButtonFigure\r\n                                                color={theme.black}>\r\n                                                {button.count}\r\n                                            </ButtonFigure>\r\n                                        </ReactionButton>\r\n                                    );\r\n                                })\r\n                            :\r\n                                nonZeroReactionButtons.map(button => {\r\n                                    const Icon = button.icon;\r\n                                    return (\r\n                                        <ReactionContainer\r\n                                            key={`reaction=${button.name}`}>\r\n                                            <ReactionIconContainer\r\n                                                data-tooltip\r\n                                                data-tooltip-at={\"top\"}\r\n                                                data-info={button.name}\r\n                                                length={20}>\r\n                                                <Icon\r\n                                                    primarycolor={theme.black}\r\n                                                    opacity={0.38}\r\n                                                    hover={false} />\r\n                                            </ReactionIconContainer>\r\n                                            <ButtonFigure\r\n                                                color={theme.black}>\r\n                                                {button.count}\r\n                                            </ButtonFigure>\r\n                                        </ReactionContainer>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </Container>\r\n                    );\r\n                }}\r\n            </ThemeContext.Consumer>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        //console.log(\"+++++ReactionBar\");\r\n    }\r\n\r\n    // ========== Methods ===========\r\n\r\n    handleOpen = (state) => {\r\n        if (state) {\r\n            // Clear timed close bar\r\n            if (this.timedClose) {\r\n                clearTimeout(this.timedClose);\r\n            }\r\n            this.setState({\r\n                open: state\r\n            });\r\n        } else {\r\n            this.timedClose = setTimeout(() => {\r\n                this.setState({\r\n                    open: state\r\n                });\r\n            }, 500)\r\n        }\r\n    };\r\n    \r\n    updateEntityReactions = feedbackValue => {\r\n        let notificationCRUDer;\r\n        if (this.props.data.variant === insightVariantTypes.BASIC) {\r\n            notificationCRUDer = new InsightNotificationCRUDer(\r\n                this.props.data.uid,\r\n                this.props.currentUser,\r\n                this.props.data\r\n            );\r\n        } else if (this.props.data.variant === insightVariantTypes.REPLY) {\r\n            notificationCRUDer = new ReplyInsightNotificationCRUDer(\r\n                this.props.data.uid,\r\n                this.props.currentUser,\r\n                this.props.data,\r\n                null,\r\n            );\r\n        }\r\n        \r\n        return InsightCRUDer.giveInsightFeedback(\r\n            this.props.data.uid,\r\n            this.props.currentUser.uid,\r\n            Feedback.reactions.NAME,\r\n            feedbackValue,\r\n            notificationCRUDer\r\n        );\r\n    };\r\n}\r\n\r\n// ============= Styled Components ==============\r\n\r\nconst Container = styled.ul`\r\n    position: relative;\r\n    display: flex;\r\n    align-items: center;\r\n    height: 30px;\r\n    width: ${props => props.open ? \"330px\" : `calc(${props.numActiveReactions * 40 + 30}px)`};\r\n    background: ${props => props.theme.white};\r\n    border-radius: 15px;\r\n    box-shadow: ${props => props.hasBoxShadow ? '0 0.5px 1.5px rgba(0,0,0,.12), 0 0.5px 1px rgba(0,0,0,.24)' : 'none'};\r\n    margin: 0px;\r\n    padding: 0px;\r\n    padding-left: 30px;\r\n    transition: width 0.3s;\r\n\r\n    & > li:last-child {\r\n        border-right: none;\r\n        border-top-right-radius: 15px;\r\n        border-bottom-right-radius: 15px;\r\n    }\r\n\r\n    & > li:first-child {\r\n        border-top-left-radius: 15px;\r\n        border-bottom-left-radius: 15px;\r\n    }\r\n`;\r\n\r\nconst ReactionButton = styled.li`\r\n    flex: ${props => props.numButtons};\r\n    height: 100%;\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-right: ${props => `1px solid ${props.theme.lightGray}`};\r\n    cursor: pointer;\r\n    transition: background 0.3s;\r\n\r\n    &:hover {\r\n        background: ${props => props.theme.lightGray};\r\n    }\r\n\r\n    &:hover svg {\r\n        opacity: 1;\r\n    }\r\n`;\r\n\r\nconst ReactionContainer = styled.li`\r\n    height: 100%;\r\n    border-radius: 50%;\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    cursor: pointer;\r\n    transition: background 0.3s;\r\n`;\r\n\r\nconst ReactionIconContainer = styled.div`\r\n    width: ${props => `${props.length}px`};\r\n    height: ${props => `${props.length}px`};\r\n`;\r\n\r\nconst MainReactionIconContainer = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    margin: 5px;\r\n    width: ${props => `${props.length}px`};\r\n    height: ${props => `${props.length}px`};\r\n    z-index: 1;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst ButtonFigure = styled.h4`\r\n    color: ${props => props.color};\r\n    font-weight: 600;\r\n    font-size: 1em;\r\n    opacity: 0.87;\r\n    margin: 0px 5px;\r\n    margin-right: 0px;\r\n    white-space: nowrap;\r\n`;\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ReactionBar);\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/ReactionBar.js	(revision cf8fed80635d9140d95c492bffa5ea397ef2f760)
+++ app/components/ReactionBar.js	(date 1548103451834)
@@ -29,7 +29,7 @@
 const INSIGHT_REACTION_OPTIONS = firestoreUtils.feedback.reactions.values;
 
 
-const mapStateToProps = (state, props) => {
+export const mapStateToProps = (state, props) => {
     let optionalProps = {};
     if (props.storeDataPath) {
         optionalProps = {
Index: app/components/NavDrawer/NavItem.test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Firebase\r\nimport config from \"../../../firebase_config\";\r\nimport firebase from 'firebase';\r\nfirebase.initializeApp(config);\r\n\r\n// Packages\r\nimport uuid from 'uuid';\r\nimport {set} from 'lodash';\r\n\r\n// Custom Modules\r\nimport firestoreUtils from '../../../functions/utils/Firestore';\r\nimport {User} from '../../../functions/profiles/functions-client-side/User';\r\nconst {mapStateToProps} = require('./NavItem');\r\n\r\n// Constants\r\nconst NOTIFICATIONS_COLLECTION = firestoreUtils.collections.users.notifications.NAME;\r\nconst USERS_COLLECTION = firestoreUtils.collections.users.NAME;\r\nconst FRIENDS_COLLECTION = firestoreUtils.collections.users.connections.FRIENDS;\r\nimport {FRIENDSHIP_STATES} from '../../data-structures/FriendRequest';\r\nconst TEST_USER = new User(uuid.v4(), null, {fullName: \"Flowheap Test User\"});\r\n\r\n\r\ndescribe('mapStateToProps', () => {\r\n\r\n    describe('state and props args are empty objects', () => {\r\n        const store = {};\r\n        const props = {};\r\n\r\n        it('should not explode when run', () => {\r\n            mapStateToProps(store, props);\r\n        });\r\n\r\n        it('should return the default props', () => {\r\n\r\n            const {\r\n                friendRequestsCount,\r\n                unreceivedNotificationsCount,\r\n                currentUserUID\r\n            } = mapStateToProps(store, props);\r\n    \r\n    \r\n            expect(friendRequestsCount).toEqual(0);\r\n            expect(unreceivedNotificationsCount).toEqual(0);\r\n            expect(currentUserUID).toBeFalsy();\r\n        })\r\n    });\r\n\r\n\r\n    it('returns the appropriate prop values', () => {\r\n        const store = {};\r\n        const props = {};\r\n\r\n        // create a test user\r\n        set(store, ['firestore', 'data', USERS_COLLECTION, TEST_USER.uid], TEST_USER);\r\n        set(store, ['profile', 'currentUser', 'uid'], TEST_USER.uid);\r\n\r\n        // create some notifications for the test user\r\n        set(store, ['firestore', 'ordered', NOTIFICATIONS_COLLECTION, TEST_USER.uid], []);\r\n        const createDummyNotification = (received) => {\r\n            const notification = {uid: uuid.v4(), received, topic: {}, payload: {}};\r\n            store.firestore.ordered[NOTIFICATIONS_COLLECTION][TEST_USER.uid].push(notification);\r\n        };\r\n\r\n        const numReceivedNotifications = Math.ceil(Math.random()*5);\r\n        for (let i = 0; i < numReceivedNotifications; i++) {\r\n            createDummyNotification(true);\r\n        }\r\n\r\n        const numUnreceivedNotifications = Math.ceil(Math.random()*5);\r\n        for (let i = 0; i < numUnreceivedNotifications; i++) {\r\n            createDummyNotification(false);\r\n        }\r\n\r\n        // create some friendships for the test user\r\n        const createDummyFriendship = (friendState) => {\r\n            const friendship = {user: uuid.v4(), state: friendState};\r\n            set(\r\n                store,\r\n                ['firestore', 'data', FRIENDS_COLLECTION, TEST_USER.uid, friendship.user],\r\n                friendship\r\n            );\r\n        };\r\n\r\n        const numReceivedFriendRequests = Math.ceil(Math.random()*5);\r\n        for (let i = 0; i < numReceivedFriendRequests; i++) {\r\n            createDummyFriendship(FRIENDSHIP_STATES.SOMEONE_SENT_YOU_A_FRIEND_REQUEST);\r\n        }\r\n\r\n        const numConfirmedFriendships = Math.ceil(Math.random()*5);\r\n        for (let i = 0; i < numConfirmedFriendships; i++) {\r\n            createDummyFriendship(FRIENDSHIP_STATES.FRIENDSHIP_CONFIRMED);\r\n        }\r\n\r\n        const numSentFriendRequests = Math.ceil(Math.random()*5);\r\n        for (let i = 0; i < numSentFriendRequests; i++) {\r\n            createDummyFriendship(FRIENDSHIP_STATES.YOU_SENT_SOMEONE_A_FRIEND_REQUEST);\r\n        }\r\n\r\n        const {\r\n            friendRequestsCount,\r\n            unreceivedNotificationsCount,\r\n            currentUserUID\r\n        } = mapStateToProps(store, props);\r\n        \r\n        expect(friendRequestsCount).toEqual(numReceivedFriendRequests);\r\n        expect(unreceivedNotificationsCount).toEqual(numUnreceivedNotifications);\r\n        expect(currentUserUID).toEqual(TEST_USER.uid);\r\n    })\r\n\r\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/NavDrawer/NavItem.test.js	(revision cf8fed80635d9140d95c492bffa5ea397ef2f760)
+++ app/components/NavDrawer/NavItem.test.js	(date 1548110852347)
@@ -47,7 +47,7 @@
 
 
     it('returns the appropriate prop values', () => {
-        const store = {};
+        const store = 7;
         const props = {};
 
         // create a test user
Index: Tests/Utils.js
===================================================================
--- Tests/Utils.js	(date 1548107351735)
+++ Tests/Utils.js	(date 1548107351735)
@@ -0,0 +1,0 @@
Index: app/components/VoteBar.test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/VoteBar.test.js	(revision cf8fed80635d9140d95c492bffa5ea397ef2f760)
+++ app/components/VoteBar.test.js	(date 1548113537423)
@@ -1,0 +1,6 @@
+// it('this is a dummy test', () => {
+//     expect(1).toEqual(2)
+// })
+test.only('please work?', () => {
+    expect(1).toBe(3
+});
\ No newline at end of file
Index: app/components/ReactionBar.test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {set} from \"lodash\";\r\nimport uuid from \"uuid\";\r\nimport {FRIENDSHIP_STATES} from \"../data-structures/FriendRequest\";\r\n\r\ndescribe('mapStateToProps', () => {\r\n    \r\n    describe('state and props args are empty objects', () => {\r\n        const store = {};\r\n        const props = {};\r\n        \r\n        it('should not explode when run', () => {\r\n            mapStateToProps(store, props);\r\n        });\r\n        \r\n        it('should return the default props', () => {\r\n            \r\n            const {\r\n                friendRequestsCount,\r\n                unreceivedNotificationsCount,\r\n                currentUserUID\r\n            } = mapStateToProps(store, props);\r\n            \r\n            \r\n            expect(friendRequestsCount).toEqual(0);\r\n            expect(unreceivedNotificationsCount).toEqual(0);\r\n            expect(currentUserUID).toBeFalsy();\r\n        })\r\n    });\r\n    \r\n    \r\n    \r\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/ReactionBar.test.js	(revision cf8fed80635d9140d95c492bffa5ea397ef2f760)
+++ app/components/ReactionBar.test.js	(date 1548110362676)
@@ -1,32 +1,5 @@
-import {set} from "lodash";
-import uuid from "uuid";
-import {FRIENDSHIP_STATES} from "../data-structures/FriendRequest";
 
-describe('mapStateToProps', () => {
-    
-    describe('state and props args are empty objects', () => {
-        const store = {};
-        const props = {};
-        
-        it('should not explode when run', () => {
-            mapStateToProps(store, props);
-        });
-        
-        it('should return the default props', () => {
-            
-            const {
-                friendRequestsCount,
-                unreceivedNotificationsCount,
-                currentUserUID
-            } = mapStateToProps(store, props);
-            
-            
-            expect(friendRequestsCount).toEqual(0);
-            expect(unreceivedNotificationsCount).toEqual(0);
-            expect(currentUserUID).toBeFalsy();
-        })
-    });
-    
-    
-    
-});
\ No newline at end of file
+
+it('this is a dummy test', () => {
+    throw new Error('Required')
+})
\ No newline at end of file
